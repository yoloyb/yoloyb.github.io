<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Lock</title>
      <link href="/posts/adfd.html"/>
      <url>/posts/adfd.html</url>
      
        <content type="html"><![CDATA[<h1>1.Lock简介</h1><p><code>Lock</code> 锁实现提供了比使用同步方法和语句可以获得的更广泛的锁操作。它们允许更灵活的结构，可能具有非常不同的属性，并且可能支持多个关联的条件对 象。<code>Lock</code> 提供了比 <code>synchronized</code> 更多的功能。</p><h2 id="1-1Lock-与的-Synchronized-区别">1.1Lock 与的 Synchronized 区别</h2><ul><li><code>Lock</code> 不是 Java 语言内置的，<code>synchronized</code> 是 Java 语言的<code>关键字</code>，因此是内置特性。Lock 是一个类，通过这个类可以实现同步访问；</li><li><code> Lock</code> 和 <code>synchronized </code>有一点非常大的不同，采用<code> synchronized</code>不需要用户去<code>手动释放锁</code>，当 synchronized 方法或者 synchronized 代码块执行完之后， 系统会<code>自动</code>让线程<code>释放对锁的占用</code>；而<code>Lock</code>则必须要用户去<code>手动释放锁</code>，如 果没有主动释放锁，就有可能导致出现死锁现象</li></ul><h1>2.Lock中常见的方法</h1><h2 id="lock-："><code>lock()</code>：</h2><p>获取锁，如果锁被其他线程获取，则进行等待，采用lock()，必须主动释放锁，并且在发生异常时候不会自动释放锁，因此一 般来说，使用 Lock 必须在 <code>try&#123;&#125;catch&#123;&#125;</code>块中进行，并且将<code>释放锁</code>的操作放在 <code>finally</code> 块中进行，以保证锁<code>一定被被释放</code>，<code>防止死锁</code>的发生。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> ...;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//处理任务</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">lock.unlock(); <span class="comment">//释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="newCondition"><code>newCondition</code>:</h2><p>关键字 synchronized 与 wait()/notify()这两个方法一起使用可以实现等待/通 知模式。</p><p>Lock 锁的 newContition()方法返回 Condition 对象，Condition 类 也可以实现等待/通知模式。</p><p><code>Condition</code> 比较常用的两个方法：</p><ul><li>await()会使当前线程等待,同时会释放锁,当其他线程调用 signal()时,线程会重 新获得锁并继续执行。</li><li>signal()用于唤醒一个等待的线程。</li></ul><blockquote><p>注意：在调用 Condition 的 await()/signal()方法前，也需要线程持有相关 的 Lock 锁，调用 await()后线程会释放这个锁，在 singal()调用后会从当前 Condition 对象的等待队列中，唤醒 一个线程，唤醒的线程尝试获得锁， 一旦 获得锁成功就继续执行。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">c1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"><span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">c2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"><span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">c3</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print5</span><span class="params">()</span> &#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (flag != <span class="number">1</span>) &#123;</span><br><span class="line">            c1.wait();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;::&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 修改标记为</span></span><br><span class="line">        flag = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 唤醒c2</span></span><br><span class="line">        c2.signal();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>3.ReentrantLock</h1><p><code>ReentrantLock</code> 是唯一<code>实现了 Lock 接口</code>的类，并且 ReentrantLock 提供了更 多的方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************* 使用lock实现卖票的例子 **************/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LTicket</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认使用非公平锁  可以设置构造参数为true为公平锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 上锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: 卖出：&quot;</span> + (number--) + <span class="string">&quot;剩下：&quot;</span> + number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 解锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LSaleTicket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LTicket</span> <span class="variable">lTicket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LTicket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                    lTicket.sale();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;AA&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                lTicket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;BB&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                lTicket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;CC&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>4.ReadWriteLock</h1><p><code>ReadWriteLock </code>也是一个接口，在它里面只定义了两个方法：一个用来获取读锁，一个用来获取写锁。也就是说将文件的读写操作分开，分成 2 个锁来分配给线程，从而使得多个线程可以同时进行读操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReadWriteLock</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the lock used for reading.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for reading</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">// 读锁</span></span><br><span class="line">    Lock <span class="title function_">readLock</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the lock used for writing.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for writing</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">// 写锁</span></span><br><span class="line">    Lock <span class="title function_">writeLock</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ReentrantReadWriteLock</code> 实现了 <code>ReadWriteLock</code> 接口</p><p><code>ReentrantReadWriteLock</code> 里面提供了很多丰富的方法，不过最主要的有两个 方法：<code>readLock()</code>和 <code>writeLock()</code>用来获取<code>读锁和写锁</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************使用ReentrantReadWriteLock模拟读写操作**************/</span></span><br><span class="line"><span class="comment">// 创建资源</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读写锁 可以同时被多个读的线程访问，只能被一个写的线程访问</span></span><br><span class="line">    <span class="comment">// 不能同时存在读写进程，读写是互斥的 读读是共享的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 上锁 写锁</span></span><br><span class="line">            readWriteLock.writeLock().lock();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在写数据！&quot;</span>);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入完成！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放写锁</span></span><br><span class="line">            readWriteLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读操作</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 上读锁</span></span><br><span class="line">            readWriteLock.readLock().lock();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在读操作！&quot;</span>);</span><br><span class="line">            result = (String) map.get(key);</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读取完成！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放读锁</span></span><br><span class="line">            readWriteLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLockDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resource</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                resource.put(finalI+<span class="string">&quot;&quot;</span>,finalI+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                resource.get(finalI+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。</li><li>如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁</li></ul>]]></content>
      
      
      <categories>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
            <tag> 锁 </tag>
            
            <tag> juc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadPool 线程池</title>
      <link href="/posts/5e3f.html"/>
      <url>/posts/5e3f.html</url>
      
        <content type="html"><![CDATA[<h1>1.简介</h1><p><strong>线程池</strong>：一种<code>线程</code>的使用<code>模式</code>。通常我们创建的线程会带来调度的大幅度开销，从而影响缓存局部性和整体的<code>性能</code>。</p><p>线程池<code>维护</code>着多个<code>线程</code>，等待监督管理者分配可并发的任务。避免了在处理短时间任务时<code>创建与销毁线程</code>的代价。</p><p><strong>线程池的优势</strong>： 线程池做的工作只要是控制运行的线程数量，处理过程中将任 务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量， 超出数量的线程排队等候，等其他线程执行完毕，再从队列中取出任务来执行。</p><p><strong>主要特点</strong>：</p><ul><li><code>降低资源的消耗</code>：通过重复利用已经创建的线程降低线程的创建和销毁的造成的消耗。</li><li><code>提高响应速度</code>：当任务到达时候，任务可以不需要等待线程的创建就可以立马执行。</li><li><code>提高线程的可管理性</code>：线程是<code>稀缺的资源</code>，如果无限制的创建，不仅会消耗系统的资源，还会降低系统的稳定性，使用线程池可以进行统一的<code>管理、分配、调优</code>。</li></ul><h1>2.线程创建方式</h1><p>Java 中的线程池是通过<code>Executor</code>框架实现的，该框架中用到了<code> Executor</code>，<code>Executors</code>， <code>ExecutorService</code>，<code>ThreadPoolExecutor</code> 这几个类。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="http://rlnhx6rml.hn-bkt.clouddn.com/%E7%BA%BF%E7%A8%8B%E6%B1%A0.png" alt="线程池继承关系" style="width:400px;"/></div><span class="image-caption">线程池继承关系</span></div><h1>3.线程池七大核心参数</h1><ul><li><code>corePoolSize</code> 线程池的核心线程数</li><li><code>maximumPoolSize</code> 能容纳的最大线程数</li><li><code>keepAliveTime</code> 空闲线程存活时间</li><li><code>unit</code> 存活的时间单位</li><li><code>workQueue</code> 存放提交但未执行任务的队列</li><li><code>threadFactory</code> 创建线程的工厂类</li><li><code>handler</code> 等待队列满后的饱和策略</li></ul><p>当提交的任务数大于<code>corePoolSize</code>的时候，会优先将任务放到<code>workQueue</code>阻塞队列中。当阻塞队列饱和后，会扩充线程池中的线程数，直到达<code>maximumPoolSize</code>最大线程数。此时，在多余的任务就会触发线程池的饱和策略。</p><h2 id="3-1饱和策略">3.1饱和策略</h2><ul><li><strong>CallerRunsPolicy</strong>：触发饱和策略后，只要线程池没有关闭，使用<code>调用线程直接运行任务</code>，<code>不允许失败</code>，如果任务提交速度过快，可能导致<code>程序阻塞</code>，性能效率上必然的损失较大。</li><li><strong>AbortPolicy</strong>: 丢弃任务并抛出拒绝执行<code>RejectedExecutionException</code>异常信息。线程池<code>默认的拒绝策略</code>。必须处理好抛出的异常，否则会打断当前的执行流程，影响后续的任务执行。</li><li><strong>DiscardPolicy</strong>: 直接丢弃，其他啥都没有。</li><li><strong>DiscardOldestPolicy</strong>: 当触发拒绝策略，只要线程池没有关闭的话，<code>丢弃阻塞 队列 workQueue 中最老的一个任务</code>，并将<code>新任务加入</code>。</li></ul><h1>4.线程池的创建</h1><h2 id="4-1-newCachedThreadPool-常用">4.1  newCachedThreadPool(常用)</h2><p>**作用：**创建一个<code>可缓存</code>线程池，如果线程池长度超过处理需要，可灵活<code>回收空闲线程</code>，若无可回收，则新建线程。</p><p><strong>特点:</strong></p><ul><li>线程池中数量没有固定，可达到最大值（<code>Interger. MAX_VALUE</code>）</li><li>线程池中的线程可进行缓存重复利用和回收（回收默认时间为 1 分钟）</li><li>当线程池中，没有可用线程，会重新创建一个线程</li><li>适用于创建一个<code>可无限扩大的线程池</code>，服务器负载压力较轻，执行时间较短，任务多的场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 底层原理：ThreadPoolExecutor七个参数</span></span><br><span class="line"><span class="comment">     *  int corePoolSize, 常驻线程数量（核心线程）</span></span><br><span class="line"><span class="comment">     *  int maximumPoolSize,最大线程数量</span></span><br><span class="line"><span class="comment">     *  long keepAliveTime, 线程存活时间</span></span><br><span class="line"><span class="comment">     *  TimeUnit unit,</span></span><br><span class="line"><span class="comment">     *  BlockingQueue&lt;Runnable&gt; workQueue 阻塞队列</span></span><br><span class="line"><span class="comment">     *  ThreadFactory threadFactory, 线程工厂</span></span><br><span class="line"><span class="comment">     *  RejectedExecutionHandler handler  饱和策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建自动扩容的线程池// 创建指定容量的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">ex</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">ex</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ex.execute(()-&gt;&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;::处理！&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 回收线程</span></span><br><span class="line">            ex.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-newFixedThreadPool-常用">4.2 newFixedThreadPool(常用)</h2><p><strong>作用</strong>：创建一个<code>可重用固定线程数</code>的线程池，以共享的无界队列方式来运行这些线程。</p><p><strong>特征：</strong></p><ul><li>线程池中的线程处于一定的量，可以很好的控制线程的并发量</li><li>线程可以重复被使用，在显示关闭之前，都将一直存在</li><li>超出一定量的线程被提交时候需在队列中等待</li><li>适用于可以预测线程数量的业务中，或者服务器负载较重，对线程数有严 格限制的场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建指定容量的线程池</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">ex</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="4-3-newSingleThreadExecutor-常用">4.3 newSingleThreadExecutor(常用)</h2><p><strong>作用</strong>：创建一个使用单个 worker 线程的 Executor，以无界队列方式来运行该线程。</p><p><strong>特征：</strong> 线程池中最多执行 1 个线程，之后提交的线程活动将会排在队列中以此 执行</p><p><strong>场景:</strong> 适用于需要保证顺序执行各个任务，并且在任意时间点，不会同时有多个 线程的场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 创建一个线程的线程池</span></span><br><span class="line"><span class="comment">//  ExecutorService ex = Executors.newSingleThreadExecutor();</span></span><br></pre></td></tr></table></figure><h2 id="4-4-newScheduleThreadPool-了解">4.4  newScheduleThreadPool(了解)</h2><p><strong>作用:</strong> 线程池支持定时以及周期性执行任务，创建一个 corePoolSize 为传入参 数，最大线程数为整形的最大数的线程池</p><p><strong>特征:</strong></p><ul><li>线程池中具有指定数量的线程，即便是空线程也将保留</li><li>可定时或者 延迟执行线程活动</li><li>适用于需要多个后台线程执行周期任务的场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title function_">newScheduledThreadPool</span><span class="params">(<span class="type">int</span> corePoolSize,ThreadFactory threadFactory)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ScheduledThreadPoolExecutor</span>(corePoolSize,threadFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>5.线程池的底层原理</h1><p>线程池的底层源码都是通过ThreadPoolExecutor来进行创建线程，根据传入的参数的不同创建不同的线程。这也是自定义线程池的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">         Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">th</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">4</span>, <span class="comment">// 核心线程数量</span></span><br><span class="line">                <span class="number">20</span>, <span class="comment">// 最大线程数量</span></span><br><span class="line">                <span class="number">5</span>, <span class="comment">// 存活时间</span></span><br><span class="line">                TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),<span class="comment">// 阻塞队列</span></span><br><span class="line">                Executors.defaultThreadFactory(),<span class="comment">// 线程工厂</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy() <span class="comment">// 饱和策略</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                th.execute(() -&gt; &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:;&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            th.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>6.线程池的工作流程</h1><div class="img-wrap"><div class="img-bg"><img class="img" src="http://rlnhx6rml.hn-bkt.clouddn.com/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86.png" alt="线程池工作原理"/></div><span class="image-caption">线程池工作原理</span></div><ol><li>在创建了线程池后，线程池中的线程数为零</li><li>当调用 execute()方法添加一个请求任务时，线程池会做出如下判断：<ol><li>如 果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；</li><li>如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入 队列；</li><li>如果这个时候队列满了且正在运行的线程数量还小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；</li><li>如 果队列满了且正在运行的线程数量大于或等于 maximumPoolSize，那么线程 池会启动饱和拒绝策略来执行。</li></ol></li><li>当一个线程完成任务时，它会从队列中取下一个任务来执行</li><li>当一个线程无事可做超过一定的时间（keepAliveTime）时，线程会判断：<ol><li>如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。</li><li>所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。</li></ol></li></ol><p><code>execute源码</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Proceed in 3 steps:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class="line"><span class="comment">     * start a new thread with the given command as its first</span></span><br><span class="line"><span class="comment">     * task.  The call to addWorker atomically checks runState and</span></span><br><span class="line"><span class="comment">     * workerCount, and so prevents false alarms that would add</span></span><br><span class="line"><span class="comment">     * threads when it shouldn&#x27;t, by returning false.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2. If a task can be successfully queued, then we still need</span></span><br><span class="line"><span class="comment">     * to double-check whether we should have added a thread</span></span><br><span class="line"><span class="comment">     * (because existing ones died since last checking) or that</span></span><br><span class="line"><span class="comment">     * the pool shut down since entry into this method. So we</span></span><br><span class="line"><span class="comment">     * recheck state and if necessary roll back the enqueuing if</span></span><br><span class="line"><span class="comment">     * stopped, or start a new thread if there are none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3. If we cannot queue task, then we try to add a new</span></span><br><span class="line"><span class="comment">     * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class="line"><span class="comment">     * and so reject the task.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">    <span class="comment">// 如果线程数小于基本的线程数，则新建线程并执行当前任务</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="literal">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果线程数大于基本线程数或者创建失败，则将当前的任务放到工作队列中</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">recheck</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果线程池不处于运行或者任务无法入队列，并且当前的线程数小于最大允许的线程数量，则新建一个线程执行任务</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="literal">false</span>))</span><br><span class="line">        <span class="comment">// 抛出异常</span></span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
            <tag> juc </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础面试题</title>
      <link href="/posts/54a0.html"/>
      <url>/posts/54a0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-面向对象和面向过程的区别">1.面向对象和面向过程的区别</h2><ul><li><code>面向过程：面向过程的性能比面向对象的高</code>。因为类调用时候需要实例化，开销比较大，比较消耗资源。</li><li><code>面向对象：面向对象易维护、易复用、易扩展</code>。面向对象具有<code>封装</code>、<code>继承</code>、<code>多态</code>的特性，所有可以设计出低耦合的系统，让系统更加灵活，更加易于维护。</li></ul><h2 id="2-重载和重写">2.重载和重写</h2><ul><li><code>重载</code>：一个方法根据输入的参数的不同，做出不同的处理。</li><li><code>重写</code>：当子类<code>继承</code>父类相同方法，输入数据一样，但是要做出有区别与父类的响应。重写就是子类对父类方法的重新改造。</li></ul><h2 id="3-封装、继承、多态">3.封装、继承、多态</h2><ul><li><code>封装</code>：把一个对象的<code>属性方法私有化</code>，同时<code>提供</code>一些外界可以被外界<code>访问的属性的方法</code>。</li><li><code>继承</code>：继承是使用已经存在的类的定义作为基础建立新的类的技术，新类的定义可以<code>增加</code>新的<code>数据</code>或者新的<code>功能</code>。可以非常方便的<code>复用代码</code>。</li><li><code>多态</code>：所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编 程时并不确定，⽽是在程序运⾏期间才确定，即⼀个引⽤变量到底会指向哪个类的实例对象，该 引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定。</li></ul><h2 id="4-自动装箱和拆箱">4.自动装箱和拆箱</h2><ul><li><code>装箱</code>：将基本类型用他们对应的引用类型包装起来</li><li><code>拆箱</code>：将包装类型转化为基本类型</li></ul><h2 id="5-接口和抽象类">5.接口和抽象类</h2><ul><li>接口的默认修饰符是<code>public</code>，所有的方法在接口中不能有实现。而抽象类可以有非抽象方法。</li><li>接口中除了<code>static</code>、<code>final</code>变量不能有其他变量，抽象类不一定。</li><li>一个类可以实现<code>多个接口</code>，只能实现<code>一个抽象类</code>。接口本身可以通过<code>extend</code>关键字扩展多个接口。</li><li>抽象是对<code>类</code>的抽象，而接口是对<code>行为</code>的抽象，是一种行为<code>设计规范</code>。</li></ul><h2 id="6-静态方法和实例方法">6.静态方法和实例方法</h2><ul><li>在外部调用静态方法时候，可以使用<code>类名.方法名</code>的方式,也可以使用<code>对象名.方法名</code>的方式。而实例方法只可以使用后面的一种方法，也就是说调用静态方法可以不创建实例对象。</li><li>静态方法在访问本类的成员变量的时候，只允许访问静态成员，而不允许访问实例成员变量和实例成员方法。</li></ul><h2 id="7-和equals">7.==和equals</h2><ul><li><code>==</code>：判断两个对象的<code>地址</code>是不是<code>相等</code>。即判断两个对象是不是同一个对象。</li><li><code>equals()</code>:判断两个对象是否<code>相等</code>，有两种情况：<ul><li><strong>情况1</strong>：类没有覆盖equals()方法，则通过equals()比较两个类的对象时，等价于通过使用<code>==</code>比较两个对象。</li><li><strong>情况2</strong>：类覆盖了这个方法，一般情况下，覆盖这个方法都是为了比较两个对象的·<code>内容</code>是否<code>相等</code></li></ul></li></ul><h2 id="8-hashCode和equals">8.hashCode和equals</h2><ul><li><code>hashCode()</code>的作用是获取<code>哈希码</code>，也叫做<code>散列码</code>，它实际上返回的是一个<code>int</code>整数。这个哈希码的作用是确定该<code>对象</code>在<code>哈希表</code>中的<code>索引位置</code>。</li><li>如果两个对象的相等，则他们的hashcode一定也是相同的。两个对象相等，对两个对象调用equals方法都是返回true。</li><li>如果两个对象的hashcode相等，那么这两个对象不一定相等，</li></ul><h2 id="9-线程、程序、进程">9.线程、程序、进程</h2><ul><li><code>进程</code>：进程是程序的一次<code>执行的过程</code>，是系统运行程序的<code>基本单位</code>，系统运行<code>一个程序</code>就是一个<code>进程从创建到消亡</code>的过程。</li><li><code>线程</code>：线程与进程相似，但是线程是一个比进程更小的<code>执行单位</code>。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程<code>共享同一块内存空间</code>和<code>同一组系统资源</code>。</li><li><code>程序</code>：是含有<code>指定和数据的文件</code>，被存储在<code>磁盘</code>或者其他的<code>数据存储设备</code>中。</li></ul><h2 id="10-IO流">10.IO流</h2><h3 id="10-1-分类">10.1 分类</h3><ul><li>按照流的<code>流向</code>：<code>输入流</code>和<code>输出流</code></li><li>按照<code>操作单元</code>划分：<code>字节流</code>和<code>字符流</code></li><li>按照流的<code>角色</code>：<code>节点流</code>和<code>处理流</code></li></ul><h3 id="10-2-四个基类">10.2 四个基类</h3><ul><li>InputStream/Reader: 所有的输⼊流的基类，前者是字节输⼊流，后者是字符输⼊流。</li><li>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><h3 id="10-3-字节流和字符流区别">10.3 字节流和字符流区别</h3><ul><li>字节流是通过<code>java虚拟机</code>将<code>字节转换</code>得到，这个过程是非常<code>耗时</code>的，如果我们不知道编码类型就很容易出现<code>乱码</code>问题。</li><li>所以I/O流就给我们提供了一个直接<code>操作字符</code>的接口，方便我们平时多字符进行流操作。</li><li>如果是<code>图片</code>、<code>音频</code>等还是使用<code>字节流</code>比较好，如果<code>涉及到字符操作</code>使用<code>字符流</code>会比较好。</li></ul><h3 id="10-4-NIO-BIO-AIO">10.4 NIO BIO AIO</h3><ul><li>BIO:同步阻塞IO模式，数据的读取写入必须阻塞在一个线程内等待其完成，口语让每一个连接专注于自己的I/O并且编程模型简单，不用过多考虑系统的过载，限流等问题。当连接数过大的时候，传统的BIO模式是无能为力的</li><li>NIO:同步非阻塞的I/O模式，对应<code>java.nio</code>包，提供了<code>Channel、Selector、Buffer</code>等抽象。支持<code>面向缓冲</code>，基于通道的I/O操作方法。<ul><li>NIO提供了与传统BIO模型中的<code>Socket</code>和<code>ServerSocket</code>相对应的<code>SocketChannel</code>和<code>ServerSocketChannel</code>两种不同的套接字实现。</li><li>两种通道都⽀持<code>阻塞</code>和<code>⾮阻塞</code>两种模式。 阻塞模式使⽤就像传统中的⽀持⼀样，比较简单，但是性能和可靠性都不好；⾮阻塞模式正 好与之相反。</li><li>对于低负载、低并发的应⽤程序，可以使⽤同步阻塞 I/O 来<code>提升开发速率</code>和<code>更好的维护性</code>；</li><li>对于⾼负载、⾼并发的（⽹络）应⽤，应使⽤NI 的⾮阻塞模式来开发</li></ul></li><li>AIO:异步⾮阻塞的 IO 模型。异步 IO 是<code>基于事件</code>和<code>回调机制</code>实现的，也就是应⽤操作之后会<code>直接返回</code>，<code>不会堵塞</code>在那⾥，当后台处理完成，操作系统会通知相应的线程进⾏后续的操作。 AIO 是异步 IO 的缩写，虽然 NIO 在⽹络操作中，提供了⾮阻塞的⽅法，但是 NIO 的 IO 行为还是同步的。</li></ul><h2 id="11-深拷贝和浅拷贝">11.深拷贝和浅拷贝</h2><ul><li><code>浅拷贝</code>：对<code>基本数据</code>类型进行<code>值传递</code>，对<code>引用数据类型</code>进行<code>引用传递</code>的拷贝。</li><li><code>深拷贝</code>：对<code>基本数据类型</code>进行<code>值传递</code>，对<code>引用数据类型</code>，创建一个<code>新的对象</code>，并<code>复制</code>其内容，此为<code>深拷贝</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot面试题</title>
      <link href="/posts/4922.html"/>
      <url>/posts/4922.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-SpringBoot">1.SpringBoot</h2><ul><li><p>通过<code>SpringBoot</code>我们可以轻松的创建独立的，基于生产级别的<code>Spring程序</code>.</p></li><li><p>使用<code>springBoot启动</code>，我们避免了之前我们必须做的所有<code>样板代码</code>和<code>配置</code>。因此<code>SpringBoot</code>可以帮助我们以<code>最少的工作量</code>，更加<code>健壮</code>的使用现有的<code>Spring程序</code>。</p></li><li><p><strong>使用SpringBoot优点</strong>：</p><ul><li><code>减少</code>开发、测试时间。</li><li>使用<code>JavaConfig</code>有助于避免使用<code>xml</code>配置文件。</li><li>避免了大量的<code>Maven</code>导入和各版本的<code>冲突</code>。</li><li>没有单独的<code>web</code>服务器需要，内嵌了<code>tomca</code>t服务器。</li><li>通过提供默认值直接进行快速开发。</li></ul></li></ul><h2 id="2-SpringBoot自动装配原理">2.SpringBoot自动装配原理</h2><ul><li>自动装配，简单来说就是把第三方组件的<code>bean</code>注册进<code>ioc容器</code>中，不需要开发人员进行收到的去<code>编写bean的配置</code>。</li><li>在SpringBoot中使用<code>@SpringBootApplication</code>注解就可以实现<code>自动装配</code>。</li><li><code>@SpringBootApplication</code>是一个复合注解，真正实现自动装配的是<code>@EnableAutoConfiguration</code>。</li><li>在引入要使用的<code>Starter启动依赖</code>组件的时候，这个组件里面会包含一个<code>@Configuration</code>标注的配置类，在这个配置类里面通过<code>@Bean</code>注解，将对应的对象注册进<code>Ioc容器</code>中。</li><li>这个配置类是放在第三方jar包里面，然后通过 SpringBoot 中的<code>约定优于配置</code>思想，把这个配置类的全路径放在<code>classpath:/META-INF/spring.factories</code>文件中。这样<code>SpringBoot</code>就可以知道第三方 jar 包里面的<code>配置类</code>的位置，这个步骤主要是用到了 Spring 里面的 SpringFactoriesLoader 来完成的。</li><li>SpringBoot 拿到所第三方 jar 包里面声明的配置类以后，再通过<code>Spring</code> 提供的<code>ImportSelector</code> 接口，实现对这些配置类的<code>动态加载</code>。</li></ul><h2 id="3-SpringBoot中的Starters">3.SpringBoot中的Starters</h2><p><code>Starters</code>可以理解为启动器，它里面包含了一系列可以<code>集成</code>到应用中的<code>依赖包</code>，我们可以通过<code>Starter</code>一站式的集成<code>Spring</code>及<code>其它技术</code>，而不需要到处找示例的源码和依赖包。<code>Starte</code>r包含了许多项目中需要用到的依赖包，他们可以<code>快速持续</code>的运行。</p><p><code>SpringBoot官方</code>的<code>starters</code>都是以<code>spring-boot-starter-</code>命名的，代表了一个特定的应用类型，第三方的Starter<code>不能以Spring-Boot</code>开头命名，以这个开头的都会Spring官方所保留，一般一个第三方的应该 这样命名，像<code>mybatis</code>的<code>mybatis-spring-boot-starter</code>。</p><h2 id="4-SpringBoot异常处理">4.SpringBoot异常处理</h2><p>spring提供了一种使用<code>ControllerAdvice</code>处理<code>异常</code>的方法，我们只需要<code>实现``ControllerAdvice</code>类，来<code>处理</code>控制器抛出的所有<code>异常</code>。</p><h2 id="5-SpringBoot核心配置文件">5.SpringBoot核心配置文件</h2><ul><li>springBoot的核心配置文件是 <code>application</code>和<code>bootstrap</code>。</li><li><strong>application</strong>：主要用于SpringBoot项目的自动化配置。</li><li><strong>bootstrap</strong>：<ul><li>使用 <code>Spring Cloud Config</code> 配置中心时，这时需要在 <code>bootstrap </code>配置文件中添加连接到<code>配置中心</code>的<code>配置属性</code>来加载<code>外部配置中心</code>的配置信息；</li><li>一些固定的<code>不能被覆盖</code>的属性；</li><li>一些<code>加密</code>/<code>解密</code>的场景；</li></ul></li></ul><h2 id="6-SpringBoot监视器">6.SpringBoot监视器</h2><p>spring boot actuator 监视器可以帮助我们访问生成环境中正在运行的应用程序的状态。有几个指标必须在生产环境中进行检查和监控。即使一些 外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接作 为HTTP URL访问的REST端点来检查状态。</p><h2 id="7-约定优于配置思想">7.约定优于配置思想</h2><ul><li>约定优于配置是一种<code>软件设计</code>的<code>范式</code>，他的<code>核心逻辑</code>就是<code>减少开发人员对于配置项的维护</code>，专注于<code>开发业务逻辑上</code>。</li><li><code>SpringBoot</code>就是约定优于配置思想下的产物，通过SpringBoot我们可以<code>快速的开发</code>基于Spring生态下的应用程序。</li><li>基于传统的Spring框架下开发web应用，我们需要做很多无关业务开发无关并且只需要做一次的配置（<code>管理jar依赖</code>、<code>web.xml的维护</code>等）</li><li>而在SpringBoot中，我们就不需要做这些繁琐的<code>配置</code>，SpringBoot会自动帮助我们完成这些配置，我们只需要关于的业务逻辑的开发。</li><li>Spring Boot Starter 启动依赖，它能帮我们管理所有 jar 包版本</li><li>如果当前应用依赖了spring mvc相关的jar，那么Spring Boot会自动内置Tomcat 容器来运行 web 应用，我们不需要再去单独做应用部署。</li><li>Spring Boot 的自动装配机制的实现中，通过扫描约定路径下的<code>spring.factories</code>文件来识别配置类，实现 Bean 的自动装配。</li><li>默认加载的配置文件<code>application.properties</code>等等。</li><li>总的来说，约定优于配置是一个比较常见的软件设计思想，它的核心本质都是为了更高效以及更便捷的实现软件系统的开发和维护。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/posts/cs.html"/>
      <url>/posts/cs.html</url>
      
        <content type="html"><![CDATA[<p>1111111111111111111111111111111111111111</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM-运行时数据区</title>
      <link href="/posts/e13.html"/>
      <url>/posts/e13.html</url>
      
        <content type="html"><![CDATA[<h1>1.运行时数据区</h1><div class="img-wrap"><div class="img-bg"><img class="img" src="http://image.yoloyb.top/jvm/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.png" alt="运行时数据区"/></div><span class="image-caption">运行时数据区</span></div><h1>2.程序计数器(pc寄存器)</h1><p><strong>作用</strong>：pc寄存器用来<code>存储指向下一条指令的地址</code>，也即将要执行的指令代码。由执行引擎取下一条指令。</p><ul><li>程序计算器是一块<code>很小的内存空间</code>，几乎可以忽略不计，同时也是<code>运行速度最快</code>的一片区域。</li><li>每一个线程都有自己的<code>程序计数器</code>，是<code>线程私有</code>的，<code>生命周期和线程完全保持一致</code>。</li><li>任何时间内一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的<code>java方法的JVM指令地址</code>。</li><li>是程序控制流的指示器，<code>分支、循环、跳转、异常处理、线程恢复</code>等基础的功能都是依赖这个完成。</li><li>字节码解释器工作时候，就是通过<code>改变</code>这个<code>计数器的值</code>来选下一条需要执行的字节码指令。</li><li>这块区域<code>没有OOM</code>情况。</li></ul><h2 id="2-1常见问题">2.1常见问题</h2><p><strong>使用PC寄存器存储字节码指令地址有什么作用，为什么要使用PC寄存器记录当前线程的执行地址。</strong></p><ul><li>因为CPU需要不停的进行<code>线程上下文</code>的切换，这时候切换回来后，就得知道从哪里<code>继续开始执行</code>。</li><li>JVM的字节码解释器就需要通过<code>改变pc寄存器的值</code>来<code>明确</code>下一条应该执行什么样子的<code>指令</code>。</li></ul><p><strong>PC寄存器为什么会被设置为线程私有</strong></p><ul><li>为了能够准确的记录<code>各个线程正在执行的当前字节码指令地址</code>，最好的方法就是为每一个线程都分配一个PC寄存器，<code>记录</code>当前线程的字节码<code>指令的地址</code>。</li></ul><h1>3.JVM栈</h1><div class="img-wrap"><div class="img-bg"><img class="img" src="http://image.yoloyb.top/jvm/java%E6%A0%88.png" alt="JVM栈"/></div><span class="image-caption">JVM栈</span></div><ul><li><p>Java虚拟机栈，是每个线程在创建时都会创建一个虚拟机栈，其内部保存一个一个的<code>栈帧</code>，对应着一次次的<code>方法调用</code>。</p></li><li><p>是<code>线程私有</code>的。</p></li><li><p>生命周期和线程<code>一致</code>。</p></li><li><p>主管Java程序的运行，它保存方法的<code>局部变量</code>、<code>部分结果</code>，并参与<code>方法的调用和返回</code>。</p></li><li><p>栈是一种<code>快速有效的分配存储</code>的方式，访问速度仅次于程序计数器。</p></li><li><p>JVM堆栈的操作只有两个，每个方法<code>执行</code>，伴随着<code>进栈（压栈</code>），执行<code>结束</code>的<code>出栈工作</code>。</p></li><li><p>栈不存在<code>垃圾回收</code>问题。</p></li><li><p><code>-xss</code>设置栈的大小。</p></li></ul><h1>4.栈会出现的异常</h1><ul><li><p>Java虚拟机规范运行Java栈的大小是动态的或者是固定不变的。</p></li><li><p>如果采用<code>固定大小的虚拟机栈</code>，那么每一个线程的Java虚拟机栈容量可以在创建的时候独立选定。如果线程请求分配的栈容量<code>超过</code>Java虚拟机栈的<code>最大允许容量</code>，Java虚拟机将会抛出<code>StackOverflowError</code>异常</p></li><li><p>如果Java虚拟机栈可以<code>动态扩展</code>，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那么会抛出<code>OutOfMemoryError</code>异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackErrorTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归调用</span></span><br><span class="line">        main(args);  <span class="comment">//Exception in thread &quot;main&quot; java.lang.StackOverflowError</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 程序计数器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-类加载器系统</title>
      <link href="/posts/9a19.html"/>
      <url>/posts/9a19.html</url>
      
        <content type="html"><![CDATA[<h1>1.类加载系统以及作用</h1><div class="img-wrap"><div class="img-bg"><img class="img" src="http://image.yoloyb.top/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.jpg" alt="类加载器系统"/></div><span class="image-caption">类加载器系统</span></div><ul><li><code>类加载器系统</code>负责从<code>文件系统</code>或者<code>网络</code>中<code>加载class文件</code>，class文件在开头有<code>特定</code>的文件<code>标识</code>。</li><li><code>ClassLoader</code>只负责<code>class文件</code>的<code>加载</code>，至于它是否可以运行，则由<code>Execution Engine</code>决定。</li><li>加载的类信息存放于一块称为<code>方法区</code>的内存空间。除了类的信息外，方法区中还会存放运行时<code>常量池信息</code>，可能还包含<code>字符串字面常量</code>和<code>数字常量</code>。</li></ul><h1>2.类加载过程</h1><div class="img-wrap"><div class="img-bg"><img class="img" src="http://image.yoloyb.top/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD.png" alt="类加载过程"/></div><span class="image-caption">类加载过程</span></div><ul><li><strong>加载</strong><ul><li>通过一个类的全类名获取定义此类的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口。</li></ul></li><li><strong>链接</strong><ul><li>验证（verify）<ul><li>目的在于<code>确保class文件</code>的字节流包含的信息是否<code>符合</code>当前虚拟机的<code>要求</code>，确保被加载类的<code>正确性</code>。</li><li>主要包含<code>四种验证</code>格式，<code>文件格式验证，元数据验证，字节码验证，符号引用验证</code>。</li></ul></li><li>准备（prepare）<ul><li>为类变量<code>分配内存</code>，设置该类变量的<code>默认初始值</code>。</li><li>如果使用<code>final修饰的static</code>，则该常量在编译时就会进行<code>显示初始化（赋值）</code>。</li><li>不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到<code>java堆</code>中。</li></ul></li><li>解析（resolve）<ul><li>将常量池内的<code>符号引用</code>转化为<code>直接引用</code>的过程。</li><li>解析操作往往会伴随<code>JVM</code>在执行完<code>初始化之后</code>在执行。</li><li>符号引用就是<code>一组符号</code>来<code>描述</code>所引用的<code>目标</code>，直接引用就是直<code>接指向目标的指针</code>、<code>相对偏移量</code>或一个间接定位到<code>目标的句柄</code>。</li><li>解析动作主要<code>针对类或接口、字段、类方法、接口方法、方法类型等</code>。</li></ul></li></ul></li><li><strong>初始化</strong><ul><li>初始化阶段就是执行类构造器方法（<code>&lt;clinit&gt;()</code>）的过程。</li><li>这个方法不需要定义，是<code>javac编译器自动收集</code>类中所有的<code>类变量的赋值动作</code>和<code>静态代码块</code>中的语句合并而来。</li><li>构造器方法中指令按语句在<code>源文件</code>中<code>出现的顺序</code>进行执行。</li><li>若该类具有父类，<code>JVM</code>会保证<code>子类的&lt;clinit()&gt;</code>执行前，<code>父类的&lt;clinit()&gt;</code>已经执行完毕。</li></ul></li></ul><h1>3.类加载器分类</h1><ul><li><strong>Bootstrap ClassLoader（引导类加载器）</strong><ul><li>这个类加载器底层是使用<code>c++实现</code>，<code>嵌套在JVM内部</code>。</li><li>用来加载java的核心类库<code>（JAVA_HOME/jre/lib/*.jar路径下的内容）</code>,用于<code>提供JVM自身所需要的类</code>。</li><li>不继承<code>java.lang.ClassLoader</code>,没有父类加载器。</li><li>只加载包名为<code>java、javax、sun</code>等开头的类</li></ul></li><li><strong>Extension ClassLoader(扩展类加载器)</strong><ul><li><code>java语言</code>编写，由<code>sun.misc.Launcher$ExtClassLoader</code>实现。</li><li>派生于<code>ClassLoader</code>类。</li><li>父类加载器为<code>引导类加载器</code>。</li><li>用于加载<code>JAVA_HOME/jre/lib/ext</code>子目录下面的加载类库。</li></ul></li><li><strong>Application ClassLoader（应用类加载器）</strong><ul><li><code>java语言</code>编写，<code>sun.misc.Launcher$AppClassLoader</code>实现。</li><li>派生于<code>ClassLoader</code>类。</li><li>父类加载器为<code>扩展类加载器</code>。</li><li>负责加载环境变量下<code>classpath或系统属性java.class.path指定路径</code>下的类库。</li><li>是程序中的<code>默认加载器</code>，一般来说，<code>java应用的类都是由它进行加载</code>。</li></ul></li><li><strong>用户自定义加载器</strong><ul><li>通过继承抽象类<code>java.lang.ClassLoader</code>类的方式，实现<code>自定义类加载器</code>。</li><li>通过继承这个抽象类，重写<code>findClass()</code>方法，实现自己的类加载逻辑。</li><li>如果没有太过于复杂的要求，可以直接继承<code>URLClassLoader</code>类。</li></ul></li></ul><h2 id="3-1ClassLoader类常见的方法">3.1ClassLoader类常见的方法</h2><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>getParent()</td><td>返回该类加载器的父类加载器</td></tr><tr><td>loadClass(String name)</td><td>加载名称为name的类，返回结果为java.lang.Class的实例</td></tr><tr><td>findClass(String name)</td><td>查找名称为name的类，返回结果为java.lang.Class的实例</td></tr><tr><td>findLoadedClass(String name)</td><td>查找名称为name的已经被加载过的类，返回结果为java.lang.Class的实例</td></tr><tr><td>defineClass(String name,byte[] b,int off,int len)</td><td>把字节数组b中的内容转化为一个Java类，返回结果为java.lang.Class的实例</td></tr><tr><td>resolveClass(Class&lt;?&gt; c )</td><td>连接一个指定的Java类</td></tr></tbody></table><h2 id="3-2-获取ClassLoader的方式">3.2 获取ClassLoader的方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前类的类加载</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoadTest.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="comment">// 获取线程中上下文的类加载器</span></span><br><span class="line">            System.out.println(Thread.currentThread().getContextClassLoader());</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前系统的类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前系统类加载器的父类加载器：扩展类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">extClassLoad</span> <span class="operator">=</span> classLoader.getParent();</span><br><span class="line">        System.out.println(extClassLoad); <span class="comment">//sun.misc.Launcher$ExtClassLoader@1b6d3586</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 引导类加载器：bootstrap ClassLoad</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">bootstarpClassLoad</span> <span class="operator">=</span> extClassLoad.getParent();</span><br><span class="line">        System.out.println(bootstarpClassLoad); <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认类加载器：</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader1</span> <span class="operator">=</span> ClassLoadTest.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader1); <span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// String使用引导类加载器 ---》java的核心类库都是使用引导类加载器进行加载</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader2</span> <span class="operator">=</span> String.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader2); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>4.双亲委派机制</h1><div class="img-wrap"><div class="img-bg"><img class="img" src="http://image.yoloyb.top/jvm/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.jpg" alt="双亲委派机制"/></div><span class="image-caption">双亲委派机制</span></div><ul><li>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求<code>委托给父类的加载器</code>去执行。</li><li>如果父类加载器还存在其父类加载器，<code>依次递归</code>，请求最终将到达<code>顶层的启动类加载器（bootstrap classloader）</code>。</li><li>如果父类加载器可以完成类加载任务，就成功返回，倘若<code>父类加载器</code>无法完成此<code>加载任务</code>，<code>子加载器才会尝试自己加载</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 类加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos原理解析</title>
      <link href="/posts/31e7.html"/>
      <url>/posts/31e7.html</url>
      
        <content type="html"><![CDATA[<h1>1.nacos原理解析</h1><h2 id="1-1客户端">1.1客户端</h2><p>在我们引入的nacos-discovery启动器  会使用spring boot 自动装配的原理 进行自动装配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册服务核心方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerService</span><span class="params">(String serviceName, String groupName, Instance instance)</span> <span class="keyword">throws</span> NacosException &#123;</span><br><span class="line">    </span><br><span class="line">    NAMING_LOGGER.info(<span class="string">&quot;[REGISTER-SERVICE] &#123;&#125; registering service &#123;&#125; with instance: &#123;&#125;&quot;</span>, namespaceId, serviceName,</span><br><span class="line">            instance);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;(<span class="number">16</span>);</span><br><span class="line">    params.put(CommonParams.NAMESPACE_ID, namespaceId);</span><br><span class="line">    params.put(CommonParams.SERVICE_NAME, serviceName);</span><br><span class="line">    params.put(CommonParams.GROUP_NAME, groupName);</span><br><span class="line">    params.put(CommonParams.CLUSTER_NAME, instance.getClusterName());</span><br><span class="line">    params.put(<span class="string">&quot;ip&quot;</span>, instance.getIp());</span><br><span class="line">    params.put(<span class="string">&quot;port&quot;</span>, String.valueOf(instance.getPort()));</span><br><span class="line">    params.put(<span class="string">&quot;weight&quot;</span>, String.valueOf(instance.getWeight()));</span><br><span class="line">    params.put(<span class="string">&quot;enable&quot;</span>, String.valueOf(instance.isEnabled()));</span><br><span class="line">    params.put(<span class="string">&quot;healthy&quot;</span>, String.valueOf(instance.isHealthy()));</span><br><span class="line">    params.put(<span class="string">&quot;ephemeral&quot;</span>, String.valueOf(instance.isEphemeral()));</span><br><span class="line">    params.put(<span class="string">&quot;metadata&quot;</span>, JacksonUtils.toJson(instance.getMetadata()));</span><br><span class="line">    <span class="comment">// 调用http请求nacos服务端 post请求 instance封装了实例的基本的信息  服务名称  ip 端口等</span></span><br><span class="line">    reqApi(UtilAndComs.nacosUrlInstance, params, HttpMethod.POST);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-服务端">1.2 服务端</h2><p>在<code>nacos 服务端</code>的<code>naming</code>包下有一个<code>InstanceController</code> 用来接收处理我们客户端发送的<code>reqApi(UtilAndComs.nacosUrlInstance, params, HttpMethod.POST)</code>;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求处理控制器</span></span><br><span class="line"><span class="meta">@CanDistro</span></span><br><span class="line"> <span class="meta">@PostMapping</span></span><br><span class="line"> <span class="meta">@Secured(parser = NamingResourceParser.class, action = ActionTypes.WRITE)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">final</span> <span class="type">String</span> <span class="variable">namespaceId</span> <span class="operator">=</span> WebUtils</span><br><span class="line">             .optional(request, CommonParams.NAMESPACE_ID, Constants.DEFAULT_NAMESPACE_ID);</span><br><span class="line">     <span class="keyword">final</span> <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> WebUtils.required(request, CommonParams.SERVICE_NAME);</span><br><span class="line">     NamingUtils.checkServiceNameFormat(serviceName);</span><br><span class="line">     <span class="comment">// 将request携带的参数还原成Instance对象</span></span><br><span class="line">     <span class="keyword">final</span> <span class="type">Instance</span> <span class="variable">instance</span> <span class="operator">=</span> parseInstance(request);</span><br><span class="line">     <span class="comment">// 注册的实际方法</span></span><br><span class="line">     serviceManager.registerInstance(namespaceId, serviceName, instance);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加实例方法  可以进行批量注册 Instance... ips可变数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInstance</span><span class="params">(String namespaceId, String serviceName, <span class="type">boolean</span> ephemeral, Instance... ips)</span></span><br><span class="line">        <span class="keyword">throws</span> NacosException &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> KeyBuilder.buildInstanceListKey(namespaceId, serviceName, ephemeral);</span><br><span class="line">    </span><br><span class="line">    <span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> getService(namespaceId, serviceName);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">synchronized</span> (service) &#123;</span><br><span class="line">        List&lt;Instance&gt; instanceList = addIpAddresses(service, ephemeral, ips);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Instances</span> <span class="variable">instances</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Instances</span>();</span><br><span class="line">        instances.setInstanceList(instanceList);</span><br><span class="line">        </span><br><span class="line">        consistencyService.put(key, instances);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****DistroConsistencyServiceImpl***/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPut</span><span class="params">(String key, Record value)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (KeyBuilder.matchEphemeralInstanceListKey(key)) &#123;</span><br><span class="line">            Datum&lt;Instances&gt; datum = <span class="keyword">new</span> <span class="title class_">Datum</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">// 将instance放入datum中</span></span><br><span class="line">            datum.value = (Instances) value;</span><br><span class="line">            datum.key = key;</span><br><span class="line">            datum.timestamp.incrementAndGet();</span><br><span class="line">            dataStore.put(key, datum);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!listeners.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        notifier.addTask(key, DataOperation.CHANGE);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** DistroConsistencyServiceImpl **/</span>        </span><br><span class="line"><span class="keyword">private</span> BlockingQueue&lt;Pair&lt;String, DataOperation&gt;&gt; tasks = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Add new notify task to queue.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> datumKey data key</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> action   action for data</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTask</span><span class="params">(String datumKey, DataOperation action)</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (services.containsKey(datumKey) &amp;&amp; action == DataOperation.CHANGE) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (action == DataOperation.CHANGE) &#123;</span><br><span class="line">                services.put(datumKey, StringUtils.EMPTY);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将instance放入一个阻塞队列</span></span><br><span class="line">            tasks.offer(Pair.with(datumKey, action));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    Loggers.DISTRO.info(<span class="string">&quot;distro notifier started&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 取出消息</span></span><br><span class="line">            Pair&lt;String, DataOperation&gt; pair = tasks.take();</span><br><span class="line">            <span class="comment">// 执行</span></span><br><span class="line">            handle(pair);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            Loggers.DISTRO.error(<span class="string">&quot;[NACOS-DISTRO] Error while handling notifying task&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3心跳机制">1.3心跳机制</h2><h3 id="客户端">客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerInstance</span><span class="params">(String serviceName, String groupName, Instance instance)</span> <span class="keyword">throws</span> NacosException &#123;</span><br><span class="line">    NamingUtils.checkInstanceIsLegal(instance);</span><br><span class="line">    <span class="type">String</span> <span class="variable">groupedServiceName</span> <span class="operator">=</span> NamingUtils.getGroupedName(serviceName, groupName);</span><br><span class="line">    <span class="keyword">if</span> (instance.isEphemeral()) &#123;</span><br><span class="line">        <span class="type">BeatInfo</span> <span class="variable">beatInfo</span> <span class="operator">=</span> beatReactor.buildBeatInfo(groupedServiceName, instance);</span><br><span class="line">        <span class="comment">// 客户端发送心跳</span></span><br><span class="line">        beatReactor.addBeatInfo(groupedServiceName, beatInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    serverProxy.registerService(groupedServiceName, groupName, instance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> JsonNode <span class="title function_">sendBeat</span><span class="params">(BeatInfo beatInfo, <span class="type">boolean</span> lightBeatEnabled)</span> <span class="keyword">throws</span> NacosException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (NAMING_LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">            NAMING_LOGGER.debug(<span class="string">&quot;[BEAT] &#123;&#125; sending beat to server: &#123;&#125;&quot;</span>, namespaceId, beatInfo.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;(<span class="number">8</span>);</span><br><span class="line">        Map&lt;String, String&gt; bodyMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (!lightBeatEnabled) &#123;</span><br><span class="line">            bodyMap.put(<span class="string">&quot;beat&quot;</span>, JacksonUtils.toJson(beatInfo));</span><br><span class="line">        &#125;</span><br><span class="line">        params.put(CommonParams.NAMESPACE_ID, namespaceId);</span><br><span class="line">        params.put(CommonParams.SERVICE_NAME, beatInfo.getServiceName());</span><br><span class="line">        params.put(CommonParams.CLUSTER_NAME, beatInfo.getCluster());</span><br><span class="line">        params.put(<span class="string">&quot;ip&quot;</span>, beatInfo.getIp());</span><br><span class="line">        params.put(<span class="string">&quot;port&quot;</span>, String.valueOf(beatInfo.getPort()));</span><br><span class="line">    <span class="comment">// 服务接口</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> reqApi(UtilAndComs.nacosUrlBase + <span class="string">&quot;/instance/beat&quot;</span>, params, bodyMap, HttpMethod.PUT);</span><br><span class="line">        <span class="keyword">return</span> JacksonUtils.toObj(result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (beatInfo.isStopped()) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="type">long</span> <span class="variable">nextTime</span> <span class="operator">=</span> beatInfo.getPeriod();</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 发送心跳</span></span><br><span class="line">               <span class="type">JsonNode</span> <span class="variable">result</span> <span class="operator">=</span> serverProxy.sendBeat(beatInfo, BeatReactor.<span class="built_in">this</span>.lightBeatEnabled);</span><br><span class="line">               <span class="type">long</span> <span class="variable">interval</span> <span class="operator">=</span> result.get(<span class="string">&quot;clientBeatInterval&quot;</span>).asLong();</span><br><span class="line">               <span class="type">boolean</span> <span class="variable">lightBeatEnabled</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">               <span class="keyword">if</span> (result.has(CommonParams.LIGHT_BEAT_ENABLED)) &#123;</span><br><span class="line">                   lightBeatEnabled = result.get(CommonParams.LIGHT_BEAT_ENABLED).asBoolean();</span><br><span class="line">               &#125;</span><br><span class="line">               BeatReactor.<span class="built_in">this</span>.lightBeatEnabled = lightBeatEnabled;</span><br><span class="line">               <span class="keyword">if</span> (interval &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                   nextTime = interval;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> NamingResponseCode.OK;</span><br><span class="line">               <span class="keyword">if</span> (result.has(CommonParams.CODE)) &#123;</span><br><span class="line">                   code = result.get(CommonParams.CODE).asInt();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (code == NamingResponseCode.RESOURCE_NOT_FOUND) &#123;</span><br><span class="line">                   <span class="type">Instance</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Instance</span>();</span><br><span class="line">                   instance.setPort(beatInfo.getPort());</span><br><span class="line">                   instance.setIp(beatInfo.getIp());</span><br><span class="line">                   instance.setWeight(beatInfo.getWeight());</span><br><span class="line">                   instance.setMetadata(beatInfo.getMetadata());</span><br><span class="line">                   instance.setClusterName(beatInfo.getCluster());</span><br><span class="line">                   instance.setServiceName(beatInfo.getServiceName());</span><br><span class="line">                   instance.setInstanceId(instance.getInstanceId());</span><br><span class="line">                   instance.setEphemeral(<span class="literal">true</span>);</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       serverProxy.registerService(beatInfo.getServiceName(),</span><br><span class="line">                               NamingUtils.getGroupName(beatInfo.getServiceName()), instance);</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (NacosException ex) &#123;</span><br><span class="line">               NAMING_LOGGER.error(<span class="string">&quot;[CLIENT-BEAT] failed to send beat: &#123;&#125;, code: &#123;&#125;, msg: &#123;&#125;&quot;</span>,</span><br><span class="line">                       JacksonUtils.toJson(beatInfo), ex.getErrCode(), ex.getErrMsg());</span><br><span class="line">               </span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 再次发送心跳  使用延迟的线程池 默认五秒</span></span><br><span class="line">           executorService.schedule(<span class="keyword">new</span> <span class="title class_">BeatTask</span>(beatInfo), nextTime, TimeUnit.MILLISECONDS);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>客户端心跳机制流程：客户端<code>发送心跳</code>，依靠<code>延迟线程池</code>（默认<code>五秒</code>），<code>循环嵌套执行心跳任务</code>，请求服务端<code>http接口（PUT类型）</code></p><h3 id="服务端">服务端</h3><p>检查实例健康状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拿到所有的实例列表</span></span><br><span class="line">List&lt;Instance&gt; instances = service.allIPs(<span class="literal">true</span>);           </span><br><span class="line"><span class="comment">// first set health status of instances:</span></span><br><span class="line"><span class="comment">// 遍历每一个实例</span></span><br><span class="line">         <span class="keyword">for</span> (Instance instance : instances) &#123;</span><br><span class="line">             <span class="comment">// 记录心跳间隔时间 是否大于心跳检查机制的超时时间（默认15秒）</span></span><br><span class="line">             <span class="keyword">if</span> (System.currentTimeMillis() - instance.getLastBeat() &gt; instance.getInstanceHeartBeatTimeOut()) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (!instance.isMarked()) &#123;</span><br><span class="line">                     <span class="keyword">if</span> (instance.isHealthy()) &#123;</span><br><span class="line">                         <span class="comment">// 如果超时 将健康状态变为false</span></span><br><span class="line">                         instance.setHealthy(<span class="literal">false</span>);</span><br><span class="line">                         Loggers.EVT_LOG</span><br><span class="line">                                 .info(<span class="string">&quot;&#123;POS&#125; &#123;IP-DISABLED&#125; valid: &#123;&#125;:&#123;&#125;@&#123;&#125;@&#123;&#125;, region: &#123;&#125;, msg: client timeout after &#123;&#125;, last beat: &#123;&#125;&quot;</span>,</span><br><span class="line">                                         instance.getIp(), instance.getPort(), instance.getClusterName(),</span><br><span class="line">                                         service.getName(), UtilsAndCommons.LOCALHOST_SITE,</span><br><span class="line">                                         instance.getInstanceHeartBeatTimeOut(), instance.getLastBeat());</span><br><span class="line">                         getPushService().serviceChanged(service);</span><br><span class="line">                         ApplicationUtils.publishEvent(<span class="keyword">new</span> <span class="title class_">InstanceHeartbeatTimeoutEvent</span>(<span class="built_in">this</span>, instance));</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>删除实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// then remove obsolete instances:</span></span><br><span class="line">         <span class="keyword">for</span> (Instance instance : instances) &#123;</span><br><span class="line">             </span><br><span class="line">             <span class="keyword">if</span> (instance.isMarked()) &#123;</span><br><span class="line">                 <span class="keyword">continue</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">// 判读当前实例心跳的间隔时候  是否规定的实例删除时间（30秒 ）</span></span><br><span class="line">             <span class="keyword">if</span> (System.currentTimeMillis() - instance.getLastBeat() &gt; instance.getIpDeleteTimeout()) &#123;</span><br><span class="line">                 <span class="comment">// delete instance</span></span><br><span class="line">                 Loggers.SRV_LOG.info(<span class="string">&quot;[AUTO-DELETE-IP] service: &#123;&#125;, ip: &#123;&#125;&quot;</span>, service.getName(),</span><br><span class="line">                         JacksonUtils.toJson(instance));</span><br><span class="line">                 <span class="comment">// 删除实例</span></span><br><span class="line">                 deleteIp(instance);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><h2 id="1-4心跳机制总体逻辑">1.4心跳机制总体逻辑</h2><ul><li>客户端定时发送心跳，采用延迟线程池定时任务进行发送，请求服务端的http接口。</li><li>服务端收到请求，记入下当前收到客户端发送的心跳的时间，判断两次心跳的间隔是否大于规定的心跳间隔。</li><li>如果大于15秒 将实例健康状态设置为flase，如果大于30秒 就进行删除实例。</li></ul>]]></content>
      
      
      <categories>
          
          <category> spring cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> nacos </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL面试题</title>
      <link href="/posts/f43.html"/>
      <url>/posts/f43.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-mysql种的锁">1.mysql种的锁</h2><ul><li><code>表级锁</code>：开销小，加锁快，不会出现死锁，锁的粒度大，发生锁冲突的概率最高，并发度最低。</li><li><code>行级锁</code>：开销大，加锁慢，会出现<code>死锁</code>，锁粒度最小，发生锁冲突的概率最低，并发度也最高。</li><li><code>页面锁</code>：开销和加锁时间界于表锁和行锁之间，会出现<code>死锁</code>，锁定粒度界于表锁和行锁之间，并发度一般。</li></ul><h2 id="2-Mysql事务的四大特性（ACID）">2.Mysql事务的四大特性（ACID）</h2><ul><li><code>原子性</code>：事务是最小的执行单位，<code>不允许分割 </code>。事务的原子性保证了动作要么<code>全部完成</code>，要么<code>全部失败</code>。</li><li><code>一致性</code>：事务执行前后数据保证<code>一致性</code>，多个事务对同一个数据的<code>读取结果</code>是<code>一致</code>的。</li><li><code>隔离性</code>：并发访问数据库的时候，一个用户的事务<code>不被</code>其他事务所<code>干扰</code>，各并发事务之间数据库是<code>独立</code>的。</li><li><code>持久性</code>：一个事务被提交后，他对数据库中数据的改变是<code>持久</code>的，即使数据库发生故障也不应该对其有任何的影响。</li></ul><h2 id="3-并发事务带来的问题">3.并发事务带来的问题</h2><ul><li><code>脏读(Dirty read)</code>：当一个事务正在访问数据并且对数据进行了修改，这种修改还没有提交到数据库中，这时候另外一个事务也访问了这个数据，然后使用了这个数据，但是因为这个数据是还没有提交的数据，那么另外一个事务读到的数据就是脏数据。</li><li><code>丢失修改（Lost to modify）</code>：指一个事务读取一个数据，另外一个数据也读取到了这个数据，那么在第一个事务中修改了这个数据后，第二个事务也对这个数据进行了修改。这样第一个事务的修改结果久丢失。</li><li><code>不可重复读（Unrepeatableread）</code>：指在一个事务内多次读同一个数据，这个事务还没有结束时，另外一个事务也访问该数据。那么在第一个事务的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据结果不一样。这样就发生了在一个事务内两次读到的结果不一致。</li><li><code>幻读(Phantom read)</code>：幻读与不可重复度类似。他发生在一个事务读取几行数据，接着另外一个事务插入了一些数据。在随后的查询过程中，第一个事务就会发现多了一些原本不存在的记录。</li></ul><h2 id="4-事务隔离级别">4.事务隔离级别</h2><ul><li><code>READ-UNCOMMITTED(读取未提交)</code>：最低的隔离级别，<code>允许读取尚未提交</code>的数据变更，可能会导致<code>脏读、幻读、不可重复读</code>。</li><li><code>READ-COMMITTED(读取已提交)</code>：允许读取并发事务已经提交的数据，可以<code>阻止脏读</code>，但是<code>幻读和不可重复读</code>还是有可能<code>发生</code>。</li><li><code>REPEATABLE-READ(可重复读)</code>：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以<code>阻止脏读</code>和<code>不可重复读</code>，幻读有可能发生。</li><li><code>SERIALIZABLE(可串⾏化)</code>：事务的<code>最高隔离级别</code>，完全服从<code>ACID</code>级别。所有事务依次执行，事务之间不可能产生相互干扰。</li></ul><h3 id="4-1MySQL的默认隔离级别">4.1MySQL的默认隔离级别</h3><ul><li>MySQL <code>InnoDB</code> 存储引擎的默认⽀持的隔离级别是 <code>REPEATABLE-READ（可重读）</code>。</li><li><code>InnoDB</code>在可重复读的事务隔离级别采用的是<code>Next-Key Lock锁算法</code>，因此可以<code>避免幻读</code>的产生，这与其他数据库系统是不同的。</li></ul><h2 id="5-大表优化">5.大表优化</h2><p>当MySQL单表<code>记录过大</code>时，数据库CRUD<code>性能</code>会明显<code>下降</code>，一些常见的优化措施：</p><ul><li><strong>限定数据的范围</strong><ul><li>禁止不带任何限制数据范围条件的查询语句。</li></ul></li><li><strong>读写分离</strong><ul><li>经典的数据库拆分方案，<code>主库负责写，从库负责读</code>。</li></ul></li><li><strong>垂直分区</strong><ul><li>根据数据库里面表的相关性进行拆分。例如：用户表中有用户的基本信息还有登入信息，就可以将用户表进行拆分。</li><li>垂直分区就是只把数据表<code>列的进行拆分</code>，把一张比较多的表拆分为多表。</li><li><code>优点</code>：可以使列数据变小，在查询时<code>减少IO次数</code>，<code>简化</code>表的<code>结构</code>，<code>易于维护</code>。</li><li><code>缺点</code>：主键会出现<code>冗余</code>，需要<code>管理冗余列</code>，垂直分区会让<code>事务</code>变得<code>更加复杂</code>。</li></ul></li><li><strong>水平分区</strong><ul><li>保持数据表结构不变，通过某种策略存储数据分片。这样<code>每一片数据``分散</code>到<code>不同的表或者库中</code>，达到<code>分布式</code>的目的。水平拆分可以<code>支撑</code>非常<code>庞大</code>的<code>数据量</code>。</li></ul></li></ul><h2 id="6-索引">6.索引</h2><p>索引是一个单独的，存储在磁盘上的数据库结构，里面包含着对数据库表里所有记录的引用指针。</p><p>索引默认的存储类型：BTree和Hash。</p><h3 id="6-1-索引分类">6.1 索引分类</h3><ul><li><p>普通索引和唯一索引</p><ul><li><p><code>普通索引</code>：Mysql中的<code>基本索引类型</code>，允许在定义索引的列中插入<code>重复值</code>和<code>null值</code>。</p></li><li><p><code>唯一索引</code>：要求<code>索引列</code>必须<code>唯一</code>，但<code>允许有空值</code>，如果是<code>组合索引</code>，则<code>列值组合必须唯一</code>，<code>主键索引</code>是一种特俗的唯一索引，<code>不允许有空值</code>。</p></li></ul></li><li><p>单列索引和组合索引</p><ul><li>单列索引：一个索引只包含一个列，一个表可以有多个单列索引</li><li>组合索引：在表的<code>多个字段</code>组合上创建的索引，只有在查询条件中使用了这些字段的<code>左边字段</code>时，索引才会使用。</li></ul></li><li><p>全文索引</p><ul><li>全文索引的类型为fulltext。</li><li>在定义索引的列上支持值得<code>全文查找</code>，允许在这些索引列插入<code>重复值和空值</code>。</li><li>全文索引可以在<code>text</code>、<code>char</code>、<code>varchar</code>类型的列上创建。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合面试题</title>
      <link href="/posts/bff1.html"/>
      <url>/posts/bff1.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-List、Set、Map区别">1.List、Set、Map区别</h2><ul><li><code>List</code>：存储的元素是<code>有序</code>的，<code>可重复</code>的。</li><li><code>Set</code>：存储元素是<code>无序</code>的，<code>不可重复</code>。</li><li><code>Map</code>：采用键值对(<code>key-value</code>)存储，<code>Key</code>是<code>无序</code>的、<code>不可重复</code>的，<code>Value</code>是<code>无序</code>，<code>重复</code>，每个键最多映射一个值。</li></ul><h2 id="2-ArrayList与LinkedList区别">2.ArrayList与LinkedList区别</h2><ul><li><code>线程安全</code>：ArrayList与LinkedList都是不同步的，所以都是线程不安全的。</li><li><code>底层数据结构</code>：ArrayList底层使用的是Object数组，LinkedList底层使用的是双向链表数据结构。</li><li><code>插入删除是否受元素位置影响</code>：<ul><li><code>ArrayList</code>采用<code>数组</code>的方式进行存储，所以插入和删除受元素位置的<code>影响</code>。</li><li><code>LinkedList</code>采用<code>链表</code>存储，所以对于add（）方法的插入，不受位置的影响，删除元素的时间复杂度不受元素位置的影响，如果要在指定的位置插入元素，时间复杂度近似为O(n)，因为需要先移动到指定位置在插入。</li></ul></li><li><code>快速随机访问</code><ul><li><code>LinkedList不支持</code>高效的随机元素访问，而<code>ArrayList支持</code>。快速随机访问就是通过元素的<code>序号</code>快速获取对象。</li></ul></li><li><code>内存空间</code>：ArrayList的空间浪费主要体现在list列表集合的结尾会<code>预留一部分容量空间</code>。而LinkedList的空间花费则体现在它的每一个元素都需要比ArrayList更多的空间（2<code>存放前驱和后继</code>）。</li></ul><h2 id="3-ArrayList-与-Vector-区别">3.ArrayList 与 Vector 区别</h2><ul><li><code>Arraylist</code>是List的主要实现类，底层使用Object数组存储，适用于频繁的<code>查找工作</code>，<code>线程不安全</code>。</li><li><code>vector</code>是List的古老实现类，底层使用Object数组存储，<code>线程安全</code>。</li></ul><h2 id="4-HashMap和HashTable">4.HashMap和HashTable</h2><ul><li><strong>线程安全</strong>：<code>HashMap</code>是线程不安全的，<code>HashTable</code>是线程安全的，因为HashTable内部的方法基本上都经过了<code>synchronized</code>修饰。</li><li><strong>效率</strong>：<code>HashMap</code>比<code>HashTable</code>的效率高，因为<code>HashMap</code>是<code>线程不安全</code>的。</li><li><strong>对null的支持</strong>：HashMap可以存储为<code>null</code>的<code>key</code>和<code>value</code>，但是作为null的key<code>只可以有一个</code>；hashTable<code>不允许有null</code>的key和value。</li><li><strong>扩容机制</strong><ul><li>创建的时候如果不指定容量的初始值，HashTable的<code>默认</code>初始化大小为<code>11</code>，之后每次扩容，容量变为原来的<code>2n+1</code>；<code>hashMap</code>默认初始化大小为<code>16</code>，之后每次<code>扩充</code>，容量变为原来的<code>2倍</code>。</li><li>如果创建时候指定了容量的初始值，HashTable会使用给定的容量大小，HashMap会将其扩充为<code>2的幂次方</code>大小。</li></ul></li><li><strong>底层数据结构</strong><ul><li><code>hashMap</code>当链表的长度<code>大于阈值</code>（默认为8）（<code>将链表转化成红黑树的时候会进行判断，如果当前数组的长度小于64，那么会选择进行扩容，而不是转化成红黑树</code>）时，将<code>链表转化成红黑树</code>，以<code>减少搜索时间</code>。HashTable没有这样机制。</li></ul></li></ul><h2 id="5-HashSet和HashMap">5.HashSet和HashMap</h2><p><code>HashSet</code>的底层就是<code>基于HashMap</code>进行实现的，HashSet 的源码⾮常⾮常少，因为除了 clone() 、 writeObject() 、 readObject() 是 HashSet ⾃⼰不得不实现之外，其他⽅法都是直接<code>调⽤ HashMap 中的⽅法</code>。</p><table><thead><tr><th>HashSet</th><th style="text-align:center">HashMap</th></tr></thead><tbody><tr><td>实现了Set接口</td><td style="text-align:center">实现了Map接口</td></tr><tr><td>仅存储对象</td><td style="text-align:center">存储键值对</td></tr><tr><td>调用add（）向Set添加元素</td><td style="text-align:center">调用put()向map添加元素</td></tr><tr><td>使用key计算hashCode</td><td style="text-align:center">HashSet 使⽤成员对象来计算 hashcode 值，对于两个对象来说 hashcode 可能相同，所以 equals() ⽅法⽤来判断对象的相等性</td></tr></tbody></table><h2 id="6-HashSet检查重复">6.HashSet检查重复</h2><ul><li>当把对象加入<code>HashSet</code>的时候，<code>HashSet</code>会先<code>计算当前对象</code>的<code>hashCode</code>值判断该对象加入的位置。</li><li>同时也会与其他对象的<code>hashcode</code>进行比较，如果没有相同的<code>hashcode</code>，<code>HashSet</code>会假设当前对象<code>没有重复出现</code>。</li><li>如果发现有<code>相同的hashcode</code>，这时候会调用<code>equals方法</code>来检查<code>hashcode</code>相等的对象是否真的相等。</li><li>若<code>两者相同</code>，HashSet就<code>不会让加入操作成功</code>。</li></ul><h2 id="7-ConcurrentHashMap-和-Hashtable-的区别">7.ConcurrentHashMap 和 Hashtable 的区别</h2><ul><li>底层数据结构<ul><li><code>JDK1.7 ConcurrentHashMap</code> 采用<code>分段数组+链表</code>实现，<code>JDK1.8</code> 采用和HashMap一样的<code>数组+链表（红黑二叉树）</code>的方式。</li><li><code>HashTable</code>采用<code>数组+链表</code>。</li></ul></li><li>线程安全<ul><li><code>JDK1.7</code> ConcurrentHashMap 对整个桶数组进行了分段分割（<code>分段锁</code>）每一把锁只锁对应容器中的一部分数据，多线程访问不同数据段的数据，就不会存在竞争关系，提高并发访问的效率。</li><li><code>JDK1.8 </code>ConcurrentHashMap 抛弃了分段分割，直接采用<code>node数组+链表+红黑树的数据结构</code>来实现，并发控制用<code>synchronized和CAS</code>进行操作。</li><li><code>HashTable</code>使用<code>synchronized</code>来保证线程安全，效率底下（<code>锁住整个表</code>）</li></ul></li></ul><p>​</p><h2 id="8-HashSet、LinkedHashSet、TreeSet">8.HashSet、LinkedHashSet、TreeSet</h2><ul><li><code>HashSet</code>是<code>Set接口</code>的主要实现类，HashSet底层主要是基于<code>HashMap</code>，是<code>线程不安全</code>的，可以存储<code>null</code>。</li><li><code>LinkedHashSet</code>是<code>HashSet</code>的子类，可以按照添加的<code>顺序遍历</code>。</li><li>TreeSet底层使用<code>红黑树</code>，能够按照添加元素的顺序进行遍历，排序的方式有<code>自然排序</code>和<code>定制排序</code>。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java并发面试题(二)</title>
      <link href="/posts/e86f.html"/>
      <url>/posts/e86f.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-线程池作用">1.线程池作用</h2><ul><li>Java线程池是运用场景最多的的并发框架，几乎所有需要异步或者并发执行任务的程序都可以使用线程池。</li><li><strong>作用</strong><ul><li><strong>降低资源的消耗</strong>：通过重复利用已经创建的线程降低线程的创建和销毁造成的消耗。</li><li><strong>提高响应的速度</strong>：当任务到达时，任务可以不需要等到线程创建就可以执行。</li><li><strong>提高线程的可管理性</strong>：线程是稀缺资源，如果无限制的创建，会大量的消耗系统资源，还会降低系统的稳定性，使用线程池就可以进行统一的分配，调优和监控。</li></ul></li></ul><h2 id="2-什么是Executors">2.什么是Executors</h2><ul><li>Executors框架实现的就是线程池的功能。</li><li>Executors工厂类中提供的<code>newCachedThreadPool</code>、<code>newFixedThreadPool </code>、 <code>newScheduledThreadPool </code>、<code>newSingleThreadExecutor </code>等方法其实也只是 ThreadPoolExecutor的<code>构造函数参数不同</code>而已。通过传入不同的参数，就可以构造出适用于<code>不同应用</code>场景下的<code>线程池</code>。</li><li><strong>线程池的四种创建方式</strong>：<ul><li><strong>newCachedThreadPool</strong>：创建一个<code>可缓存线程池</code>，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收线程，则创建新的线程。</li><li><strong>newFixedThreadPool</strong> ：创建一个<code>定长的线程池</code>，可<code>控制</code>线程<code>最大并发数</code>，<code>超出</code>的线程会在队列中<code>等待</code>。</li><li><strong>newScheduledThreadPool</strong> ：创建一个<code>定长的线程池</code>，支持<code>定时</code>和<code>周期性任务</code>执行。</li><li><strong>newSingleThreadExecutor</strong>：创建一个<code>单线程化的线程池</code>，它只会使用<code>唯一</code>的线程来执行任务，保证所有任务按照指定的<code>顺序执行</code>。</li></ul></li></ul><h2 id="3-Executor-和-Executors-的区别">3.Executor 和 Executors 的区别</h2><ul><li>Executors 工具类的不同方法按照我们的需求创建了不同的线程池，来满足业务的需求。</li><li><code>Executor</code> 接口对象能<code>执行</code>我们的<code>线程任务</code>。</li><li>ExecutorService 接口继承了 Executor 接口并进行了扩展，提供了更多的方法我们能获得任务执行的状态并且可以获取任务的返回值。</li><li>使用 ThreadPoolExecutor 可以创建自定义线程池。</li></ul><h2 id="4-submit-和-execute-方法">4.submit() 和 execute() 方法</h2><ul><li>相同点：都可以开启线程执行池中的任务。</li><li><strong>不同点</strong>：<ul><li><code>接受参数</code>：execute()只可以接收<code>Runnable</code>类型的任务，submit()可以执行Runnable和<code>Callable</code>类型的任务。</li><li><code>返回值</code>：submit()方法可以返回持有计算结果的<code>Future对象</code>，而execute()不可以。</li><li><code>异常处理</code>：submit()方便Exception处理。</li></ul></li></ul><h2 id="5-线程池的执行原理">5.线程池的执行原理</h2><ul><li>提交一个任务到线程池：<ol><li>判断线程池里面的<code>核心线程</code>是否都在执行任务，如果不是(核心线程空闲或者还有核心线程没有被创建)，则创建一个新的线程执行任务，如果都在执行任务，则进入下一个流程。</li><li>线程池判断<code>工作队列</code>是否已满，如果工作队列没有满，则将任务存储到工作队列。如果满了，进入下一个流程。</li><li>判断<code>线程池</code>里面的<code>线程</code>是否都处于<code>工作状态</code>，如果没有，如果没有创建一个新的工作线程处理任务，如果满了交给<code>饱和策略</code>处理任务。</li></ol></li></ul><h2 id="6-饱和策略">6.饱和策略</h2><ul><li><code>ThreadPoolExecutor.AbortPolicy</code>：抛出 <code>RejectedExecutionException</code>来<code>拒绝</code>新任务的处理。</li><li><code>ThreadPoolExecutor.CallerRunsPolicy</code>：调用执行自己的线程运行任务。您不会任务请求。但是 这种策略会降低对于新任务提交速度，影响程序的整体性能。另外，这个策略喜欢增加队列容量。 如果您的应用程序可以承受此延迟并且你不能任务丢弃任何一个任务请求的话，你可以选择这个策略。</li><li><code>ThreadPoolExecutor.DiscardPolicy</code>：不处理新任务，直接丢弃掉。</li><li><code>ThreadPoolExecutor.DiscardOldestPolicy</code>： 此策略将丢弃最早的未处理的任务请求。</li></ul><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发面试题(一)</title>
      <link href="/posts/a7f7.html"/>
      <url>/posts/a7f7.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Java守护线程和本地线程区别">1.Java守护线程和本地线程区别</h2><p><code>Java</code>中的线程分为：<code>守护线程</code>和<code>本地线程</code>。</p><p><code>任何线程</code>都可以设置为守护线程(<code>Thread.setDaemon(true)</code>)；反之则为<code>用户线程</code>，Thread.setDaemon(true)必须在<code>Thread.start()</code>之前调用，否者运行时候会<code>抛出异常</code>。</p><p><strong>区别：</strong></p><ul><li>守护线程<code>Daemon</code>是为其他线程<code>提供服务</code>，如果全部的<code>用户线程撤离</code>，Daemon没有服务的线程,<code>JVM撤离</code>。</li><li>也可以理解为守护线程是<code>JVM</code>自己<code>创建</code>的线程（<code>不一定</code>），<code>用户线程</code>是<code>程序</code>所创建的线程。</li><li>例如JVM的<code>垃圾回收线程</code>就是一个<code>守护线程</code>，当所有线程撤离，不在生产垃圾，守护线程自然就没有事情可以干，当垃圾回收线程是JVM上<code>仅剩的线程</code>时候，Java虚拟机就会<code>自动离开</code>。</li></ul><h2 id="2-多线程的上下文切换">2.多线程的上下文切换</h2><p><code>多线程</code>会使用一组计算机上的<code>CPU</code>，当线程数<code>大于</code>给程序分配的<code>CPU</code>数量时候，为了让各个<code>线程都有执行</code>的机会，就需要<code>轮转使用CPU</code>，不同的线程切换使用CPU发生的切换数据等就是<code>上下文切换</code>。</p><h2 id="3-死锁和活锁">3.死锁和活锁</h2><p>**死锁：**死锁指的是两个或者<code>两个以上</code>的<code>线程</code>在执行的过程中，因<code>争夺资源</code>而造成的一种<code>相互等待</code>的现象，若无外力作用，它们将<code>无法推进</code>下去。</p><p><strong>死锁产生的条件：</strong></p><ul><li><strong>互斥条件</strong>：进程在某个时间<code>独占资源</code>。</li><li><strong>请求和保持条件</strong>：一个进程因请求<code>资源</code>而<code>阻塞</code>，对已经获得的<code>资源</code>保持<code>不释放</code>。</li><li><strong>不剥夺条件</strong>：进行已经获得<code>资源</code>，在未使用之前，<code>不</code>可以<code>强行剥夺</code>。</li><li><strong>循环等待条件</strong>：若干线程之中形成了一种头尾相接的循环等待资源状态。线程T1等待T2占有的资源。线程T2等待T1占有的资源。</li></ul><p><strong>避免死锁：</strong></p><ul><li>请求和保持条件：一次性申请<code>所有</code>的<code>资源</code>，这样就不存在等待。</li><li>不可剥夺条件：占用部分的资源的线程，进一步申请其他资源时候，如果申请不到可以<code>主动释放</code>它占有的资源。</li><li>循环等待条件：可以使用<code>按序申请资源</code>进行预防，申请资源的时候先申请序号小的，在申请序号大的，这样<code>线性化</code>之后就不存在循环等待了。</li></ul><p><strong>活锁</strong>：任务或者执行者没有被阻塞，由于<code>某些条件</code>没有<code>满足</code>，导致一致<code>失败</code>，<code>重试</code>，<code>失败·</code>········。</p><p>死锁和活锁的区别在于，处于活锁的实体是<code>不断</code>的<code>改变状态</code>，<code>活锁</code>有可能自己<code>解开</code>，而<code>死锁</code>不可能会自己解开。</p><h2 id="4-线程安全">4.线程安全</h2><ul><li>如果你的代码 在多线程下执行和在单线程下执行永远都能获得一样的结果，那么你的代码就是线程安全的。</li><li>基本特征<ul><li>原子性：就是相关的操作不会中途被其他线程干扰，一般通过同步机制实现。</li><li>可见性：一个线程修改了某个变量，其状态可以立马被其他线程知晓。</li><li>有序性：保证线程内串行语义，避免指令重排。</li></ul></li></ul><h2 id="5-synchronized关键字">5.synchronized关键字</h2><ul><li>synchronized关键字是用来控制线程同步的，在多线程的环境下，控制synchronized代码段不被多个线程同时执行。</li><li>synchronized可以修饰类、方法、变量。</li><li><strong>修饰实例方法</strong>：作用于当前<code>对象实例</code>加锁，进入同步代码块之间要获得<code>当前对象</code>的锁。</li><li><strong>修饰静态方法</strong>：给<code>当前类</code>加锁，会作用域<code>当前类</code>的所有<code>对象实例</code>。</li><li><strong>修饰代码块</strong>：<code>指定</code>加锁对象，给指定对象<code>加锁</code>，进入同步代码块之前要获得指定对象的锁。</li></ul><h2 id="6-synchronized底层原理">6.synchronized底层原理</h2><ul><li>synchronized的<code>底层</code>是通过一个<code>monitor（监视器锁）</code>来完成的。</li><li>每一个对象都有一个<code>监视器锁（monitor）</code>，每个synchronized修饰过的代码当它的<code>monitor被占用时</code>就会处于<code>锁定状态</code>并且尝试<code>获取monitor</code>的所有权.</li><li>如果<code>monitor</code>的进入数为<code>0</code>，则该线程进入<code>monitor</code>，然后将进入<code>人数</code>设置为<code>1</code>，即该线程为<code>monitor的所有者</code>。</li><li>如果线程已经<code>占有了monitor</code>，只是<code>重新进入</code>，则<code>monitor进入数+1</code>。</li><li>如果其他线程已经<code>占用了monitor</code>，则该线程进入<code>阻塞状态</code>，直到<code>montior的进入数为0</code>，在尝试<code>重新获取</code>montior的<code>所有权</code>。</li></ul><h2 id="7-synchronized和lock的区别">7.synchronized和lock的区别</h2><ul><li><code>synchronized</code>是<code>关键字</code>是<code>JVM层面</code>，<code>lock是一个类</code>。</li><li><code>synchronized</code>可以给<code>类、方法、代码块</code>进行<code>加锁</code>，<code>lock</code>只能给<code>代码块加锁</code>。</li><li><code>synchronized不需要手动获取锁和释放锁</code>，使用简单，发生异常会<code>自动释放锁</code>，<code>不会</code>造成<code>死锁</code>。</li><li><code>lock</code>需要<code>手动加锁</code>和<code>释放锁（unlock）</code>，如果<code>不释放锁</code>就会造成<code>死锁</code>。</li><li>通过<code>lock</code>可以知道有没有<code>成功获取锁</code>，而synchronized无法知道。</li></ul><h2 id="8-Volatile关键字">8.Volatile关键字</h2><ul><li>volatile关键字保证了<code>可见性</code>和<code>禁止指令重排</code>。</li><li>volatile提供<code>happens-before</code>的保证一个线程的<code>修改</code>是对其他线程<code>可见的</code>。</li><li>当一个被<code>volatile</code>修饰的<code>变量</code>发生改变的时候，它被修改的值会立马<code>保存</code>到<code>主内存</code>中，其他线程进行<code>读取</code>的时候，会去内存中读取<code>最新的值</code>。</li><li>volatile无法保证变量的<code>原子性</code>。</li></ul><h2 id="9-CAS">9.CAS</h2><ul><li>CAS 是 <code>compare and swap</code> 的缩写，即我们所说的<code>比较交换</code>。</li><li>CAS是一种基于<code>锁的操作</code>，而且是<code>乐观锁</code>。</li><li>CAS操作包含三个操作数，<code>内存位置（V）</code>、<code>预期原值（A）</code>、<code>新值（B）</code>。如果内存地址里面的值和A值是<code>一样</code>的，那么就将内存里面的<code>新值更改为B</code>，CAS是通过无限循环来获取数据，如果在第一轮循环中，a线程获取地址里面的值被b线程<code>修改</code>，那么a线程需要<code>自旋</code>，到下次循环才有可能<code>有机会执行</code>。</li></ul><h2 id="10-atomic（原子类）">10.atomic（原子类）</h2><ul><li>原子操作是指一个<code>不受其他操作影响</code>的操作<code>任务单元</code>，是在<code>多线程环境下避免数据不一致</code>所采取的必须的手段。</li><li>支持在单个变量上解除锁的<code>线程安全编程</code>原子变量类相当于一种<code>泛化</code>的<code> volatile</code> 变量，能够支持原子的和有条件的<code>读-改-写</code>操作。</li><li>atomic包中的类基本特性就是在<code>多线程环境</code>下，当有<code>多个线程</code>同时对<code>单个变量</code>进行<code>操作</code>时，具有<code>排他性</code>，当有<code>多个线程</code>对变量进行<code>修改</code>的时候，只有<code>一个线程</code>可以<code>成功</code>，而未成功的线程可以向自旋锁一样，继续尝试，直到成功为止。</li></ul><h2 id="11-重排序">11.重排序</h2><ul><li>程序的执行顺序是按照代码的<code>先后顺序</code>执行。</li><li>处理器为了<code>提高</code>程序运行的<code>效率</code>，可能会对<code>输入代码</code>进行<code>优化</code>，进行重新排序（<code>重排序</code>），他不保证程序中各个语句的执行先后顺序和代码的先后顺序一样，但是它保证最终的执行<code>结果</code>和代码顺序执行结果是<code>一致</code>的。</li><li>重排序在单线程的时候运行是不会有问题的但是多线程情况下就可能会发生最后结果的错误。</li></ul><h2 id="12-Java线程调度算法">12.Java线程调度算法</h2><p><strong>分时调度</strong>：让所有的线程<code>轮流</code>的获得cpu的<code>使用权</code>，并且<code>平均分配</code>每个线程占用<code>cpu</code>的<code>时间</code>。</p><p><strong>抢占式调度</strong>：是指优先让可以运行池中<code>优先级高</code>的线程<code>占用cpu</code>，如果可运行池线程的<code>优先级</code>是<code>一致</code>，那么<code>随机</code>选择一个线程运行，使其<code>独占cpu</code>，处于运行状态的线程会<code>一致运行</code>，直到不得不得<code>放弃cpu</code>。</p><h2 id="13-SynchronizedMap-和-ConcurrentHashMap">13.SynchronizedMap 和 ConcurrentHashMap</h2><p><code>synchronizedMap</code>是一次性<code>锁住整个表</code>，保证<code>线程安全</code>，所以每次只能由<code>一个线程</code>访问<code>map</code>。</p><p><code>concurrentHashMap</code>使用<code>分段锁</code>来保证<code>线程安全</code>和<code>性能</code>。</p><p>concurrentHashMap默认的将hash表分为<code>16个桶</code>，一次<code>锁住一个桶</code>，诸如<code>get</code>、<code>put</code>、<code>remove</code>等操作只锁当前<code>需要用到的桶</code>。</p><p>这样原来只能有一个线程进入，现在可以同时有16个写线程执行，<code>显著提升了性能</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试题 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud常见面试题</title>
      <link href="/posts/8aa5.html"/>
      <url>/posts/8aa5.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Spring-Cloud">1.Spring Cloud</h2><ul><li>Spring Cloud是一系列<code>框架</code>的有序<code>集合</code>，利用<code>Spring Boot</code>的开发便利性巧妙的化简了<code>分布式系统</code>的基础开发，如<code>服务发现注册</code>、<code>配置中心</code>、<code>智能路由</code>、<code>消息总线</code>、<code>负载均衡</code>、<code>断路器</code>、<code>数据监控</code>等，都可以用Spring Boot的开发风格做到<code>一键启动</code>和<code>部署</code>。</li><li>Spring Cloud将市面上的各家公司开发的比较<code>成熟</code>的，经得起<code>考验的</code>服务<code>框架</code>组合起来，通过<code>Spring Boot风格</code>进行再次<code>封装</code>抛弃了复杂的配置和实现原理，最终留给开发者一套<code>简单易懂</code>的，<code>容易部署</code>，和<code>容易维护</code>的<code>分布式系统开发工具包</code>。</li><li>Spring Cloud是一套非常<code>完善</code>的<code>分布式架构框架</code>。</li></ul><h2 id="2-Spring-Cloud优缺点">2.Spring Cloud优缺点</h2><h3 id="2-1优点">2.1优点</h3><ul><li><code>耦合度低</code>。各个模块开发之间<code>不会相互影响</code>。</li><li>减轻团队的成本，可以<code>并行</code>进行<code>开发</code>，可以不用关注其他模块的开发，只需要关注自己的模块。</li><li>配置简单，基本主要使用<code>注解</code>就可以实现，不用过多的配置<code>配置文件</code>。</li><li>微服务<code>跨平台</code>，可以使用任何一种语言进行开发。</li><li>每个<code>微服务</code>都有自己的<code>数据库</code>。</li><li>直接写<code>后端</code>的代码，不用关注前端怎么写，直接编写后端代码，<code>暴露接口</code>，就可以实现<code>组件</code>之间的<code>通信</code>。</li></ul><h3 id="2-2-缺点">2.2 缺点</h3><ul><li><code>部署</code>比较麻烦，给运维工程师带来一定的麻烦。</li><li>针对<code>数据</code>的<code>管理</code>比较麻烦，每一个服务都有自己的数据库。</li><li>系统的<code>集成测试</code>比较麻烦。</li><li>性能的<code>监控</code>比较麻烦。</li></ul><h2 id="3-使用Spring-Cloud面临问题">3.使用Spring Cloud面临问题</h2><ul><li>与分布式系统相关的复杂性，<code>网络延迟问题</code>，<code>延迟开销</code>，<code>带宽问题</code>，<code>安全问题</code>。</li><li><code>服务发现</code>-服务发现工具管理群集中的流程和<code>服务</code>如何<code>查找</code>和<code>相互调用</code>。</li><li>分布式系统中的<code>冗余问题</code>。</li><li><code>负载平衡</code>问题。</li><li><code>性能</code>问题。</li></ul><h2 id="4-服务注册和发现">4.服务注册和发现</h2><ul><li>当我们开始一个项目，我们通常会在属性文件中进行所有的配置。随着服务的增多和服务的部署，添加修改这写配置文件会变得更加复杂。有些服务可能会下降，有些服务可能会发生位置的变换，使得<code>维护</code>项目变得<code>困难</code>。</li><li>服务注册和发现就可以帮助解决我们的这个问题，通过将各个服务注册进服务中心（<code>eureka</code>，<code>nacos</code>）,就可以通过<code>服务注册中心</code>来进行<code>服务</code>之间的<code>调用</code>和<code>查找</code>，不需要<code>处理</code>服务地点的<code>更改</code>和处理。</li></ul><h3 id="4-1服务注册发现原理（nacos）">4.1服务注册发现原理（nacos）</h3><ul><li><code>服务注册</code>：当服务启动后，会通过<code>rest请求</code>的方式向<code>nacos server</code>注册自己的服务。</li><li><code>服务心跳</code>：<code>Nacos Cilent</code>会维护一个定时的心跳持续的通知<code>nacos  server</code>默认是<code>5秒</code>一次，当nacos server超过了<code>15秒</code>没有接收到心跳，会将服务的<code>健康状态设置为false</code>（在进行拉去的时候就会忽略不健康的服务），超过<code>30秒</code>没有收到心跳的话，就会<code>删除该服务</code>。</li><li><code>服务发现</code>：nacos client会有一个<code>定时拉去的任务</code>，实时的去nacos server <code>拉去健康的服务</code>。</li><li><code>服务停止</code>：nacos client会主动的通过rest请求，向nacos server发送一个注销的请求。</li></ul><h2 id="5-Eureka服务注册发现中心">5.Eureka服务注册发现中心</h2><ul><li><code>Eureka</code>是<code>Spring Cloud</code>中的服务<code>注册功能</code>的服务器，系统中的其他服务可以使用Eureka的客户端将其连接到<code>Eureka Service</code>中，并且<code>保持心跳</code>，我们通过Eureka Service来<code>监控</code>各个<code>服务</code>是否<code>运行正</code>常。</li><li><code>Eureka高可用</code>：我们可以注册多个Eureka来实现Eureka的<code>集群</code>模式，然后把<code>SpringCloud</code>服务互相<code>注册</code>，客户端从Eureka获取信息时，按照Eureka的顺序来访问。</li></ul><h2 id="6-Eureka自我保护">6.Eureka自我保护</h2><ul><li>如果<code>Eureka Serrvice</code>在<code>一定的时间</code>内没有接收到某个微服务的<code>心跳</code>，<code>Eureka Service</code>会进入到<code>自我保护</code>的模式。</li><li>该模式下<code>Eureka Service</code>会保护注册服务列表中的信息，<code>不删除</code>注册表中的<code>数据</code>。</li><li>当重新<code>检测</code>到<code>心跳</code>后，Eureka Service会<code>退出</code>自我保护的模式。</li></ul><h2 id="7-网关-Zuul-GateWay">7.网关(<code>Zuul</code> <code>GateWay</code>)</h2><ul><li>网关相当于一个网络服务架构的<code>入口</code>，所有的网络请求都必须通过网关<code>转发</code>到具体的<code>服务</code>上去。</li><li>统一的管理微服务的<code>请求</code>、<code>权限的控制</code>，<code>负债均衡</code>、<code>路由转发</code>、<code>安全控制黑白名单</code>等等。</li><li>网关会根据<code>请求</code>的路径的<code>不同</code>，定位到指定的<code>微服务</code>，并代理请求到不同的<code>微服务接口</code>，对外<code>隐藏</code>真的的服务的<code>接口地址</code>。</li><li><code>GateWay</code>是Spring Cloud推出的新一代网关，取代的老一代的<code>Zuul</code>。</li><li>GateWay使用一个<code>RouteLocatorBuilder</code>的bean去<code>创建路由</code>，并且可以添加各种的<code>predicates</code>和<code>filters</code>，可以根据请求的具体的规则让具体的Route去处理，filter是过滤器，用来对请求做各种<code>判断</code>和<code>修改</code>。</li></ul><h2 id="8-Ribbon">8.Ribbon</h2><ul><li>Ribbon是NetFix发布的一个开源的项目，<code>主要功能</code>是提供客户端的软件<code>负债均衡</code>的算法。</li><li>Ribbon客户端组件提供了一套完善的配置项，如<code>连接超时</code>，<code>重试</code>等，<code>Ribbon</code>会自动的帮助你基于某种的规则（<code>轮询</code>，<code>随机</code>等）去连接这些机器。</li><li><code>底层原理</code>：使用<code>DiscoveryCilent</code>从注册中心读取<code>目标服务</code>的信息，对接口进行<code>统一的计数</code>，使用<code>%取余算法</code>获取目标服务集群索引，并返回取到的目标<code>服务信息</code>。</li></ul><h2 id="9-断路器-hystrix，sentinel">9.断路器(<code>hystrix</code>，<code>sentinel</code>)</h2><h3 id="9-1简介">9.1简介</h3><ul><li>当一个服务调用另外一个服务，由于<code>网络</code>或<code>服务自身</code>的原因出现<code>问题</code>，调用者就会<code>等待</code>被调用者的<code>响应</code>，当更多的服务请求到这些资源会导致更多的等待，发生<code>连锁的效应（雪崩效应）</code>。</li><li>断路器就能够保证在一个依赖出现问题的情况下<code>不会``导致</code>整体的服务的<code>失败</code>，避免<code>级联故障</code>，提高<code>分布式系统的弹性</code>。</li><li>断路器开源在某个服务单元发生故障的时候，向调用方返回一个符合预期的，可处理的<code>备选方案</code>（<code>FallBack</code>）。</li></ul><h3 id="9-2-服务降级、熔断、限流、监控">9.2 服务降级、熔断、限流、监控</h3><ul><li><strong>服务降级</strong>：接口调用失败就调用本地的方法，给调用则返回一个null或者提示等。</li><li><strong>服务熔断</strong>：类比于保险丝，当达到最大的访问后，直接拒绝访问，然后调用服务降级的方法返回错误，或者一个友好的提示，当检测到该节点微服务调用响应正常后，恢复调用链路</li><li><strong>服务限流</strong>：在某些高并发的场景下，禁止同时访问，进行排队等候进行处理。</li><li><strong>服务监控</strong>：在服务发生调用时,会将每秒请求数、成功请求数等运行指标记录下来。</li></ul><h3 id="9-3-雪崩效应">9.3 雪崩效应</h3><ul><li>当某个服务宕机后，调用这个服务的其他服务也会发生宕机，或者大规模等待。</li><li>项目之间的服务之间的调用是互通的，这样就会将服务的不可用扩大到其他的各个服务，从而使整个项目服务宕机，发生雪崩效应。</li></ul><h2 id="10-feign">10.feign</h2><ul><li>feign是一个声明式WebService客户端。使用Feign能让编写Web Service客户端更加简单。</li><li>它的使用方法是定义一个服务接口然后在上面添加注解。</li><li>Feign也支持可拔插式的编码器和解码器。</li><li>Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters。</li><li>Feign可以与Eureka和Ribbon组合使用以支持负载均衡</li></ul><h2 id="11-Ribbon和Feign调用服务的区别">11.Ribbon和Feign调用服务的区别</h2><ul><li><code>Ribbon</code>需要我们自己构建<code>Http请求</code>，模拟Http请求然后通过<code>RestTemplate</code>发给其他 服务，步骤相当繁琐。</li><li>而<code>Feign</code>则是在<code>Ribbon</code>的基础上进行了一次改进，采用<code>接口</code>的形式，将我们需要调用的服务方法定义成抽象方法保存在本地就可以了，不需要自己<code>构建Http请求</code>了，直接<code>调用接口</code>就行了，不过要注意，调用方法要和本地抽象方法的签名完全一致。</li></ul><h2 id="12-Spring-Cloud-Config">12.Spring Cloud Config</h2><p><code>Spring Cloud Config</code>为微服务架构中的微服务提供集中化的<code>外部配置</code>支持，配置服务器为各个<code>不同微服务应用</code>的所有环境提供了一个<code>中心化</code>的外部配置。</p><p>Spring Cloud Config分为·<code>Config Server</code>和<code>Config Client</code>两部 分。<code>Config Server</code>负责<code>读取配置</code>文件，并且暴露<code>Http API接口</code>，<code>Config Client</code>通过调用<code>Config Server</code>的<code>接口</code>来读取配置文件。</p><p><strong>作用</strong>：</p><ul><li>集中管理配置文件</li><li>不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</li><li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li><li>将配置信息以REST接口的形式暴露   post、curl访问刷新均可…</li><li>与GitHub整合配置   由于SpringCloud Config默认使用Git来存储配置文件(也有其它方式,比如支持SVN和本地文件)，但最推荐的还是Git，而且使用的是http/https访问的形式</li></ul><h2 id="13-SpringCloud-Bus消息总线">13.SpringCloud Bus消息总线</h2><ul><li>Spring Cloud Bus就像一个分布式执行器，用于扩展的Spring Boot应用程序的配置文件，但也可 以用作应用程序之间的通信通道。</li><li>Spring Cloud Bus 不能单独完成通信，需要配合MQ支持 。</li><li>Spring Cloud Bus一般是配合Spring Cloud Config做配置中心的 。</li><li>Springcloud config实时刷新也必须采用SpringCloud Bus消息总线。</li></ul><h2 id="14-配置中心原理（nacos）">14.配置中心原理（nacos）</h2><ul><li><code>nacos服务端</code>创建了相关的配置项之后，<code>客户端</code>就可以进行<code>监听</code>。</li><li>客户端时通过一个<code>定时任务来</code>检查自己<code>监听的配置项的数据</code>，一旦<code>服务端</code>的<code>数据</code>发送了<code>变化</code>，客户端就会获取到<code>最新的数据</code>，并将最新的数据保存在一个<code>CacheData</code>对象中，然后会从新计算<code>CacheData的md5</code>属性的值，此时就会对<code>该CacheData所绑定</code>的Listener触发接收配置消息的回调。</li></ul><h2 id="15-SpringCloud-Stream消息驱动">15.SpringCloud Stream消息驱动</h2><ul><li><code>屏蔽</code>底层消息中间件的<code>差异</code>,<code>降低</code>切换<code>成本</code>，统一消息的编程模型</li><li><code>轻量级</code>事件驱动<code>微服务框架</code>，可以使用<code>简单</code>的<code>声明式模型</code>来发送及接收消息，主要实现为Apache Kafka及RabbitMQ。</li><li>应用程序通过<code>inputs</code>或者 <code>outputs </code>来与<code> Spring Cloud Stream</code>中<code>binder</code>对象<code>交互</code>。</li><li>所以，我们只需要搞清楚如何与 <code>Spring Cloud Stream 交互</code>就可以方便使用消息驱动的<code>方式</code>。</li><li>通过使用Spring Integration来连接消息代理中间件以实现消息事件驱动。</li><li><code>Spring Cloud Stream</code> 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了<code>发布-订阅</code>、<code>消费组</code>、<code>分区</code>的三个核心概念。</li></ul><h2 id="16-Spring-Cloud-Sleuth">16.Spring Cloud Sleuth</h2><ul><li>在微服务中，通常根据业务模块分服务，项目中前端发起一个请求，后端可能<code>跨几个服务</code>调用才能 完成这个请求。</li><li>如果系统越来越庞大，<code>服务</code>之间的调用与被<code>调用</code>关系就会变得很<code>复杂</code>。</li><li>假如一个请求中需要跨几个服务调用，其中一个服务由于<code>网络延迟</code>等<code>原因</code>挂掉了，那么这时候我们 需要<code>分析</code>具体哪一个服务出<code>问题</code>了就会显得很<code>困难</code>。</li><li><code>Spring Cloud Sleuth</code>服务链路跟踪功能就可以帮助我们快速的发现<code>错误根源</code>以及监控分析每条请求<code>链路上</code>的<code>性能</code>等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> spring </tag>
            
            <tag> spring cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis常见面试题</title>
      <link href="/posts/9797.html"/>
      <url>/posts/9797.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-mybatis简介">1.mybatis简介</h2><ul><li><code>mybatis</code>是一个半<code>ORM</code>的框架，内部封装了jdbc，在开发时候只需要关注<code>SQL语句</code>本身，不需要花费其他精力去处理加载<code>驱动</code>，<code>创建连接</code>，<code>创建statement</code>等繁琐的过程，直接进行编写<code>原生的sql</code>，可以严格的控制<code>sql</code>执行<code>性能</code>，<code>灵活度高</code>。</li><li>mybatis可以通过<code>xml</code>或者<code>注解</code>的方式来配置和映射原生信息，将<code>POJO</code>映射成<code>数据库</code>中的<code>记录</code>，避免了几乎所有的<code>jdbc代码</code>和手动设置参数获取<code>结果集</code>。</li></ul><h2 id="2-mybatis优缺点">2.mybatis优缺点</h2><h3 id="2-1优点">2.1优点</h3><ul><li>基于<code>sql编程</code>，相当<code>灵活</code>，不会对应用程序或者数据库的现有设置造成任何的影响，<code>sql</code>写在<code>xml</code>里面，解除了sql与代码的<code>耦合</code>，方便统一进行<code>管理</code>。支持<code>动态sql</code>标签。</li><li>与JDBC相比，减少了<code>50%</code>以上的代码量，<code>消除</code>了大量<code>冗余</code>的<code>JDBC</code>，不需要手动进行数据库的<code>连接</code>和<code>关闭</code>。</li><li>很好的与各种数据库<code>兼容</code>。</li><li>很好的与<code>spring集成</code>。</li><li>提供了<code>映射标签</code>，支持对象与数据库的<code>ORM字段</code>关系<code>映射</code>，提供对象关系映射标签，支持对象关系组件的<code>维护</code>。</li></ul><h3 id="2-2-缺点">2.2 缺点</h3><ul><li><code>SQL语句</code>的编写工作量大，当<code>字段多，关联的表多</code>的时候，对开发人编写sql的功底有一定的要求。</li><li><code>SQL语句``依赖数据库</code>，导致数据库的<code>移植性</code>差，不能随意的更换数据库。</li></ul><h2 id="3-和-的区别">3.#{}和${}的区别</h2><ul><li><code>#&#123;&#125;</code>是<code>预编译</code>处理，<code>$&#123;&#125;</code>是字符串替换。</li><li><strong>#{}</strong>：mybatis在处理<code>#&#123;&#125;</code>的时候，会将<code>#&#123;&#125;</code>替换成<code>？</code>，调用<code>PreparedStatement</code>的<code>set</code>方法来赋值</li><li><strong>${}</strong>：mybatis在处理<code>$&#123;&#125;</code>的时候，会把<code>$&#123;&#125;</code>替换成<code>变量</code>的值。</li><li>使用<code>#&#123;&#125;</code>可以有效防止sql注入攻击，提高系统的<code>安全性</code>。</li></ul><h2 id="4-当实体类中的属性名和表中的字段名不一样-，怎么办-？">4.当实体类中的属性名和表中的字段名不一样 ，怎么办 ？</h2><ul><li>通过在查询的<code>sql语句</code>中定义字段的<code>别名</code>，让字段名的<code>别名</code>和实体类的<code>属性</code>名字一致</li><li>通过来<code>resultMap</code>标签来映射<code>字段名</code>和实体类<code>属性名</code>的<code>一一对应</code>的关系。</li></ul><h2 id="5-mybatis分页原理">5.mybatis分页原理</h2><ul><li>mybatis使用<code>rowBounds</code>对象进行分页，他是针对<code>resultSe</code>t结果集执行的<code>内存分页</code>，而非<code>物理上的分页</code>。</li><li>我们可以使用<code>sql</code>直接<code>拼接</code>带有物理分页的参数(在sql后面使用<code>limit</code>)来完成物理分页功能。也可以使用<code>分页插件</code>来完成物理分页。</li><li>分页插件的原理是使用<code>mybatis</code>提供的<code>插件接口</code>，实现<code>自定义</code>插件，在插件的<code>拦截器</code>方法内<code>拦截带执行的sql</code>，然后<code>重写sql</code>，根据dialect方言，添加对应的物理<code>分页语句</code>和物理<code>分页参数</code>。</li></ul><h2 id="6-mybatis缓存机制">6.mybatis缓存机制</h2><h3 id="一级缓存">一级缓存</h3><ul><li>在应用运行的过程中，我们可能存在一次数据库会话中，执行多次完全相同的查询语句，mybatis提供了<code>一级缓存</code>方案来优化这个使用场景。如果是相同的sql语句，会优先命中一级缓存，避免直接对数据库进行查询，提高性能。</li><li>在一级缓存中，每个<code>sqlsession</code>都持有一个<code>executor</code>，每一个<code>executor</code>都有一个<code>localcache</code>。</li><li>当用户发起查询的时候，mybatis根据当前执行的sql语句生成<code>mappedStatemen</code>t，进行<code>localcache</code>查询。</li><li>如果缓存<code>命中</code>的，直接<code>返回</code>给用户，否者进行<code>数据库</code>查询，将查询结果写入<code>localcache</code>，最后返回结果给用户。</li><li>一级缓存的最大范围是sqlSession内部，如果有多个sqlSession或者分布式的环境下，数据库写操作会引起脏数据。</li></ul><h3 id="二级缓存">二级缓存</h3><ul><li>在多个sqlSession之间进行共享缓存，就要使用二级缓存（<cache/>）</li><li>开启二级缓存会使用 CachingExecutor装饰的executor，在进入一级缓存查询之前，会先在二级缓存中进行查询，如果二级缓存没有命中，然后在去一级缓存进行查询。</li><li>二级缓存开启后，同一个<code>namespace</code>下的所有的操作语句，都会影响同一个<code>cache</code>，所以二级缓存被多个<code>sqlSession共享</code>，是一个<code>全局</code>的变量。</li><li>使用二级缓存必须在<code>sqlSession关闭</code>或者<code>提交</code>之后才会生效，查询的数据所对应的实体类必须实现<code>序列化</code>接口。</li><li>如果在两次的查询期间执行了任意的<code>增删改</code>操作，都会使<code>一二级</code>缓存都<code>失效</code>。</li></ul><h2 id="7-Dao接口的工作原理">7.Dao接口的工作原理</h2><ul><li>dao接口就是我们常说的mapper接口，接口的<code>全类名</code>就是<code>mapper</code>映射文件中<code>namespace</code>的值，接口的方法名就是映射文件<code>Mapper</code>的<code>statement</code>的值，接口内的<code>参数</code>，就是传递给sql的<code>参数</code>。</li><li>mapper接口是没有实现类的，当调用接口方法的时候，接口的<code>全类名+方法名</code>做给<code>key</code>值，定位唯一的一个<code>MapperStatement</code>，在mybatis中每一个<code>&lt;select&gt;</code> 、<code>&lt;insert&gt;</code>、<code>&lt;update&gt;</code>、<code>&lt;delete&gt;</code>标签，都会被解析为一个 <code>MapperStatement </code>对象。</li><li>mapper接口的方法，不可以进行重载，因为mybatis是使用接口的<code>全类名+方法名</code>的保存和寻找策略。</li><li>Mapper 接口的工作原理是<code> JDK 动态代理</code>，Mybatis 运行时会使用 JDK 动态代理为 Mapper 接口生成代理对象 <code>proxy</code>，代理对象会<code>拦截接口</code>方法，转而 <code>执行 MapperStatement </code>所代表的<code> sql</code>，然后将 sql 执行<code>结果</code>返回。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springmvc常见面试题</title>
      <link href="/posts/4592.html"/>
      <url>/posts/4592.html</url>
      
        <content type="html"><![CDATA[<h1>1.Spring MVC</h1><p><code>springmvc</code>是基于java的实现了<code>MVC设计模式</code>的请求驱动类型的轻量的<code>web框架</code>，通过<code>三层架构</code>（<code>model-view-controller</code>），将web层进行解耦，把复杂的web应用分成逻辑清晰的几个部分，简化开发，方便组内开发人员的配合。</p><h1>2.核心组件</h1><ul><li>前端控制器：<code>DispatchServlet</code><ul><li>作用：接收用户发来的请求，响应结果，相当于转发器，减少其他组件之间的耦合性。</li></ul></li><li>处理器映射器：<code>HandlerMapper</code><ul><li>作用：根据请求的路径（<code>URL</code>）查找对应可以处理请求的handler。</li></ul></li><li>处理器：<code>Handler</code><ul><li>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行<code>处理</code>。</li></ul></li><li>处理器适配器：<code>HandlerAdapter</code><ul><li>作用：对处理器的方法进行执行。</li></ul></li><li>视图解析器：<code>ViewResolver</code><ul><li>作用：解析视图，得到对应的视图(<code>View</code>)。</li></ul></li><li>视图：<code>View</code><ul><li>作用：将模型数据展示给用户。</li></ul></li></ul><h1>3.SpringMVC工作流程</h1><ol><li>用户向服务器<code>发送</code>请求，请求被前段控制器<code>DispatcherServlet</code>捕获</li><li>DispatcherServlet对请求的<code>URL</code>进行<code>解析</code>，得到请求资源标识符（<code>URI</code>），判断请求的<code>路径</code><ul><li>a）不存在<ul><li>①判断是配置了默认的servlet处理器<code>mvc:default-servlet-handler</code></li><li>②如果没有配置则，控制台报映射找不到，客户端显示<code>404错误</code></li></ul></li><li>b）存在则执行以下流程</li></ul></li><li>根据该URI，调用<code>HandlerMapping</code>获得该<code>Handler</code>配置的所有的相关的对象（包括Handler对象以及 Handler对象对应的拦截器），最后以<code>HandlerExecutionChain</code>执行链对象的形式返回。</li><li><code>DispatcherServlet </code>根据获得的<code>Handler</code>，选择一个合适的<code>HandlerAdapter</code>。</li><li>如果成功获得<code>HandlerAdapter</code>，此时将开始执行<code>拦截器</code>的<code>preHandler(…)</code>方法【<code>正向</code>】</li><li>提取<code>Request中的模型数据</code>，填充<code>Handler</code>入参，开始执行<code>Handler（Controller)方法</code>，处理请求。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：<ul><li>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定 的响应信息</li><li>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</li><li>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</li><li>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</li></ul></li><li>Handler执行完成后，向<code>DispatcherServlet</code> 返回一个<code>ModelAndView</code>对象。</li><li>此时将开始执行<code>拦截器</code>的<code>postHandle(...)</code>方法【<code>逆向</code>】。</li><li>根据返回的<code>ModelAndView</code>（此时会判断是否存在异常：如果存在<code>异常</code>，则执行 <code>HandlerExceptionResolve</code>进行异常处理）选择一个适合的<code>ViewResolver</code>进行视图解析，根据<code>Model</code> 和<code>View</code>，来<code>渲染</code>视图。</li><li>渲染视图完毕执行拦截器的<code>afterCompletion(…)</code>方法【<code>逆向</code>】。</li><li>将渲染结果<code>返回</code>给客户端。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring面试题</title>
      <link href="/posts/9fb1.html"/>
      <url>/posts/9fb1.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Spring的概念">1.Spring的概念</h2><ul><li><code>spring</code>是一个轻量级的java开发<code>框架</code>，目的是为了<code>解决</code>企业应用开发的业务层逻辑层和其他各层之间的一个<code>耦合</code>的关系，可以让我们<code>java开发者</code>只<code>专注</code>于应用程序的<code>开发</code>。</li><li><code>spring</code>最根本的使命就是<code>解决</code>企业级应用的开发的<code>复杂性</code>，<code>简化java开发</code>。</li></ul><h2 id="2-IOC和AOP">2.IOC和AOP</h2><h3 id="2-1-IOC-控制反转">2.1 IOC(控制反转)</h3><p>spring两大核心之一，它把传统上由程序代码直接操控的对象的调用权交给<code>容器</code>，通过容器来实现对象组件的装配和管理。所谓的“控制反转”概念就是对组件对象控制权的转移，从<code>程序代码</code>本身<code>转移</code>到了<code>外部容器</code>。</p><h3 id="2-2-IOC的工作流程">2.2 IOC的工作流程</h3><p><strong>第一阶段</strong></p><p>ioc的初始化，这个阶段主要是通过程序中根据<code>XML</code>或者<code>注解</code>等<code>bean</code>的声明方式。通过<code>解析</code>加载后生成<code>BeanDefinition</code>，然后把<code>BeanDefinition注册进IOC</code>容器中。</p><p>通过注解或者XML文件声明的bean通常会解析得到一个<code>BeanDefinition实体</code>，这个实体包含了这个<code>bean</code>定义中的<code>基本信息</code>，最后把这些bean封装到一个<code>map集合</code>中，从而完成ioc的<code>初始化</code>。</p><p><strong>第二阶段</strong></p><p>通过<code>反射</code>对没有设置<code>lazy-init</code>属性的<code>单例bean</code>进行初始化，完成bean的<code>依赖注入</code>。</p><p><strong>第三阶段</strong></p><p>通常我们会通过<code>@Autowired</code>或者<code>BeanFactory.getBean</code>()从容器中获取指定bean的实例。</p><p>另外针对另外，针对设置 layy-init 属性以及非单例 bean 的实例化，是在每次获取bean对象的时候，调用 <code>bean 的初始化方法</code>来完成实例化的，并且Spring IOC容器<code>不会去管理</code>这些 Bean。</p><h3 id="2-2-AOP-面向切面">2.2 AOP(面向切面)</h3><p>面向切面编程，这是一种编程的模式，用于将哪些于<code>业务无关</code>的，但对多个对象产生影响的<code>公共的行为和逻辑</code>，抽取到一个<code>可重用的模块</code>，减少系统中代码的重复性，降低耦合度，一般可以用于权限认证、日志、以及事务处理中。（<code>基于动态代理实现</code>）</p><h2 id="3-spring核心模块">3.spring核心模块</h2><ul><li>spring core：提供了框架的<code>基本</code>组成部分，包括<code>ioc</code>和<code>DI</code>。</li><li>spring bean：提供了<code>beanfactory</code>,是工厂模式的一个具体实现，<code>spring</code>将管理对象称之为<code>bean</code>。</li><li>spring context：构建与<code>core</code>封装包基础上的<code>context</code>封装包，提供了一种框架式的对象访问方法。</li><li>spring jdbc：提供了<code>jdbc</code>的抽象层，消除了繁琐的<code>jdbc编程</code>，用于<code>简化jdbc</code>。</li><li>spring aop：提供了面向切面编程，让我们可以自定义拦截器，和切入点。</li><li>spring web：提供了针对 Web 开发的集成特性，例如文件上传，利用<code> servlet listeners</code> 进行 ioc 容器初始化和针对 <code>Web </code>的 <code>ApplicationContext</code>。</li><li>spring test：主要为测试提供支持。</li></ul><h2 id="4-spring中使用到的设计模式">4.spring中使用到的设计模式</h2><ul><li>工厂模式：<code>BeanFactory</code>就是简单工厂模式的体现，用来创建对象的实例。</li><li>单例模式：<code>bean</code>默认为单例模式。</li><li>代理模式：<code>AOP</code>用到了jdk的动态代理和CGLIB字节码生成技术。</li><li>模板方法：用来解决代码的<code>重复性问题</code>。</li><li>观察者模式：定义对象一种<code>一对多</code>的依赖关系，当一个对象<code>发生改变</code>时候，所有依赖它的对象都会得到通知<code>自动更新</code>。</li></ul><h2 id="5-依赖注入-DI">5.依赖注入(DI)</h2><p><code>依赖注入</code>相当于<code>ioc容器</code>的一个具体的<code>实现</code>，我们不用创建对象，只需要描述它是如何被创建，不用在代码中直接组装组件和服务，只要在配置文件中描述哪些组件需要哪些服务，ioc容器会负责帮助我们组装。</p><h3 id="5-1依赖注入的方式">5.1依赖注入的方式</h3><ul><li>构造器注入：：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每 个参数代表一个对其他类的依赖。</li><li>Setter方法注入：Setter方法注入是容器通过调用无参构造器或无参static工厂 方法实例化bean之 后，调用该bean的setter方法，即实现了基于setter的依赖注入。</li></ul><h2 id="6-spring-bean">6.spring bean</h2><h3 id="6-1-bean的作用域">6.1 bean的作用域</h3><ul><li>singleton：单例，意味着在整个ioc容器中只会有一个实例。</li><li>prototype：多例，意味着每次我们从ioc容器中获取bean的时候，都会返回一个新的实例对象。</li><li>基于web应用里面，增加了一个会话维度来控制bean的作用域主要有</li><li>request：针对每一次http请求，都会创建一个新的bean。</li><li>session：以session会话维度，同一个session共享同一个bean，不同session产生不同的bean实例。</li><li>globalSession：针对全局session维度，共享同一个bean实例</li></ul><h3 id="6-2-bean的生命周期">6.2 bean的生命周期</h3><ul><li>spring从注解和xml配置文件<code>读取到bean</code>的定义，并进行<code>实例化bean</code>。</li><li>spring根据bean的定义进行<code>依赖注入</code>。</li><li>如果bean实现了<code>BeanNameAware</code>接口，则传递bean的Id到<code>setBeanName</code>方法。</li><li>如果bean实现了<code>BeanFactoryAware</code>接口，则传递beanfactory给<code>setBeanFactory</code>方法。</li><li>如果我们实现了<code>BeanPostProcessors</code>接口，则会调用bean的<code>前置处理器方法</code>。</li><li>如果bean实现了<code>IntializaingBean</code>，调用他的<code>afterPropertySet</code>方法。</li><li>如果bean声明了初始化方法，则调用此初始化方法。</li><li>如果我们实现了<code>BeanPostProcessors</code>接口，则会调用bean的<code>后置处理器方法</code>。</li><li>bean对象就绪可以使用<code> bean对象销毁</code>（需在配置bean时<code>指定销毁方法</code>） IOC容器关闭</li></ul><h2 id="7-循环依赖问题">7.循环依赖问题</h2><p>如果在代码中，将两个或多个 Bean 互相之间持有对方的引用就会发生循环依赖。循环的依赖将会导致注入死循环。这是Spring 发生循环依赖的原因。</p><p>Spring采用了三级缓存来解决循环依赖的问题：</p><ul><li>当我们进行去调用<code>getBean</code>方法的时候，<code>Spring</code>会先从一级缓存中去寻找我们所需要的<code>bean</code>，如果<code>一级缓存没有</code>，就会去<code>二级缓存</code>中查找。</li><li>如果一二级缓存都没有找到，证明bean还没有被<code>实例化</code>，然后<code>Spring</code>会进行实例化<code>bean</code>（刚实例化的<code>bean没有进行依赖注入</code>被叫做<code>早期的bean</code>)。</li><li>将早期的<code>bean放入二级缓存</code>，当进行下一轮赋值的时候，也就是进行<code>依赖注入</code>的时候，会从二级缓存中去找到所需要的bean，等到依赖注入完成，就将二级缓存中的bean放入一级缓存中。</li><li>三级缓存是用来存储代理<code> Bean</code>，当调用<code> getBean()</code>方法时，发现目标Bean需要通过代理工厂来创建，此时会将创建好的实例保存到三级缓存，最终也会将赋值好的 Bean 同步到一级缓存中。</li></ul><h2 id="8-spring自动装配">8.spring自动装配</h2><p>在spring中，对象无需通过自己查找或创建与其关联的其他对象，由容器辅助把需要相互协作的对象引用赋予各个对象。使用@autoired来配置自动装配模式。</p><p><strong>在spring框架中xml配置一共有5种自动装配：</strong></p><ul><li>no：不进行自动装配，通过手工<code>设置ref</code>属性来进行装配bean。</li><li>byName：通过<code>bean的名称</code>进行自动装配，如果一个bean的<code>property</code>与另外一个bean的<code>name </code>相同则进行自动装配。</li><li>byType：通过参数的<code>数据类型</code>进行自动装配。</li><li>constructor：利用<code>构造函数</code>进行装配，并且构造函数的参数通过<code>byType</code>进行装配。</li><li>autodetect：<code>自动探测</code>。如果有构造方法通过 <code>construct</code>的方式自动装配，否则使用<code> byType</code>的方式自动装配。</li></ul><p><strong>@Autowired具体过程</strong></p><ul><li>使用这个注解进行自动装配，需要在<code>xml文件</code>中配置<code>&lt;context: annotation-config/&gt;</code>。</li><li>在<code>启动spring ioc</code>时候，容器自动的挂载了一个<code>AutowiredAnnotationBeanPostProcessor</code>后置处理器，到容器扫描到<code>@Autowied</code>、<code>@Resource</code>或<code>@Inject</code>时,就会自动在容器中查找所需要的bean，并且装配给该对象的属性。</li><li>在使用<code>@Autowired</code>时候，会首先在容器中查找对应类型的bean。</li><li>如果查询的数据刚好为一个，那么就会将该bean装配给标记了<code>@Autowired</code>注解的数据。</li><li>如果查询的结果为<code>多个</code>，那么<code>@Autowired</code>会根据<code>name</code>来进行查找，如果查找的结果为<code>null</code>，则会抛出异常。</li></ul><p><strong>@Autowired和@Resource区别</strong></p><ul><li>@Autowired默认是按照类型来自动装配，默认情况下它要求依赖的对象必须存在（可以设置它 required属性为false）。</li><li>@Resource默认是按照名称来进行自动装配，只有找不到与名称匹配的bean才会按照类型来进行自动装配。</li></ul><h2 id="9-spring事务">9.spring事务</h2><ul><li><p><strong>spring支持两种的事务管理类型：</strong></p><ul><li>编程式事务：我们可以通过<code>编程</code>的方式进行管理事务，可以给我们带来极大的灵活性，但是难以维护。</li><li>声明式事务：我们可以将业务代码和事务管理进行<code>分离</code>，只需要通过<code>注解</code>或者<code>xml方式</code>来配置事务。</li></ul></li><li><p><code>spring事务</code>的本质就是数据库对事务的支持，没有数据库事务的支持，<code>spring</code>单独是无法提供事务功能的，真正的数据库层的事务提交和回滚是通过<code>binlog</code>或者<code>redolog</code>来实现的。</p></li><li><p><strong>spring事务传播行为</strong></p><ul><li>① PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就 加入该事务，该设置是最常用的设置。(<code>默认</code>)</li><li>② PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不 存在事务，就以非事务执行。</li><li>③ PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前 不存在事务，就抛出异常。</li><li>④ PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。</li><li>⑤ PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前 事务挂起。</li><li>⑥ PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</li><li>⑦ PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则 按REQUIRED属性执行。</li></ul></li><li><p><strong>事务隔离级别</strong></p><ul><li><code>ISOLATION_DEFAULT</code>：用底层数据库的设置隔离级别，数据库设置的是什么我就用什么；（<code>默认</code>）</li><li><code>ISOLATION_READ_UNCOMMITTED</code>：未提交读，最低隔离级别、事务未提交前，就可被其 他事务读取（会出现幻读、脏读、不可重复读）；</li><li><code>ISOLATION_READ_COMMITTED</code>：提交读，一个事务提交后才能被其他事务读取到（会造成 幻读、不可重复读），SQL server 的默认级别；</li><li><code>ISOLATION_REPEATABLE_READ</code>：可重复读，保证多次读取同一个数据时，其值都和事务开 始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读），<code>MySQL 的默认级别</code>；</li><li><code>ISOLATION_SERIALIZABLE</code>：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏 读、不可重复读、幻读。</li></ul></li><li><p><strong>脏读</strong> ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A， 此时该事务还未提交，然后另一个事务尝试读取到了记录 A。</p></li><li><p><strong>不可重复读</strong> ：是指在一个事务内，多次读同一数据。</p></li><li><p><strong>幻读</strong> ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条 记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是 另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修 改了，所有数据行的记录就变多或者变少了。</p></li></ul><hr><h2 id="10-Spring-AOP-和-AspectJ的区别">10.Spring AOP 和 AspectJ的区别</h2><ul><li>Spring AOP提供了AspectJ的支持，用到了AspectJ的切点解析和匹配。@Aspect @Before等注解都是AspectJ提供的。</li><li>Spring AOP使用的时jdk动态代理。默认的如果使用接口使用的时JDK动态代理，如果没有接口，使用的是CGLIB实现。</li><li>AspectJ使用的时静态代理。</li></ul><h2 id="11-Spring-AOP具体流程">11.Spring AOP具体流程</h2><ol><li><code>@EnableAspectJAutoProxy</code>会通过<code>@Import</code>向容器中注册一个<code>BeanPostProcess</code>处理AOP</li><li><code>解析切面</code>：在bean创建之前的第一个bean后置处理器，会进行对切面的解析（解析切面中，通知、切点、一个通知就会解析成一个<code>advisor</code>）</li><li><code>创建动态代理</code>：正常的bean初始化之后调用后置处理器拿到之前缓存的<code>advisor</code>，在通过advisor中的pointCut判断当前bean是否和切点表达式匹配，如果匹配就会创建动态代理。</li><li><code>调用</code>：拿到动态代理对象之后，就会调用方法，判断当前方法是否时一个需要增强的方法。就会通过调用链的方式去依次的执行通知。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch常见面试题</title>
      <link href="/posts/361.html"/>
      <url>/posts/361.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-elasticsearch简述">1.elasticsearch简述</h2><ul><li>elasticsearch是一个高度可伸缩的开源的全文搜索和分析引擎，它可以帮助我们实现快速和接近实时的存储、搜索和分析大量的数据。</li><li>系统中的数据，随着业务的增大，将会变得非常多，我们这时如果还是采用传统的模糊查询的方式（模糊查询会导致引擎放弃索引，导致查询数据都是全表进行扫描）进行查询数据，将会导致查询的效率非常的底下。</li><li>我们可以用es做一个全文的索引，将经常查询的字段，放入es库，提高查询的效率。</li></ul><h2 id="2-elasticsearch倒排索引">2.elasticsearch倒排索引</h2><ul><li><p>传统的我们检索文章步骤，是逐个遍历找到对应的关键词的位置。</p></li><li><p>倒排索引，是通过分词的策略，形成了词和文章的映射关系表，这种词典+映射表就是我们说的倒排索引。</p></li><li><p>有了倒排索引，我们就能形成O（1）时间复杂度的效率检索文章，极大的提高了检索的效率。</p></li></ul><h2 id="3-master选举机制">3.master选举机制</h2><ol><li><code>Elasticsearch</code> 的选主是 <code>ZenDiscovery</code> 模块负责的，主要包含<code>ping</code>（节点之间通过这个PRC来发现彼此）和 <code>Unicast</code>（单播模块包含一个主机列表以控制哪些节点需要 ping 通）这两部分。</li><li>对所有可以成为<code>master</code>节点<code>（node.master: true）</code>根据他们的<code>id</code>进行<code>排序</code>，每一次选举每个节点把自己所知道的节点进行一次排序，选出排在第一个（第0位）的节点，暂缺认为他是master节点。</li><li>如果对某一个节点的投票数达到最大值<code>（可以成为 master 节点数 n/2+1</code>），并且该节点自己也选取自己，则这个节点就是<code>master节点</code>。</li><li>master节点的主要职责主要包括，集群，节点和索引的管理，不负责文档级别的管理；</li></ol><h2 id="4-集群脑裂问题">4.集群脑裂问题</h2><h3 id="1-原因">1.原因</h3><ul><li>网络问题：集群之间的网络延迟导致一些节点<code>迟迟访问不到master</code>，会认为<code>master节点挂掉</code>从而选举出新的master节点。</li><li>节点负载：主节点的角色既是<code>master</code>又是<code>data</code>，访问量比较大时候可能会导致es停止造成大面积的访问延迟，此时其他节点得不到master的响应，会重新选取master节点</li><li>内存回收：data节点上占用的内存比较大，引发<code>JVM</code>的大规模的<code>回收</code>，造成ES进程的失去响应。</li></ul><h3 id="2-解决方案">2.解决方案</h3><ul><li>减少误判：将master节点的响应时间设置长一点<code>（discovery.zen.ping_timeout）</code>,默认三秒，如果这个时间内master<code>没有响应</code>则会认为master节点<code>挂掉</code>了。可以调大参数减少误判。</li><li>选举触发：<code>discovery.zen.minimum_master_nodes：1</code><ul><li>该参数是用于控制选举行为发生的最小的集群主节点数量。当备选主节点的个数大于等于该参数的值，并且备选节点中有该参数个节点认为master挂了，就会触发选举。我们可以减少有资格成为master节点的个数<code>（官方建议为（n/2）+1，n 为主节点个数）</code>。</li></ul></li><li>角色分离：master节点与data节点分离，限制角色。<ul><li>主节点配置为：node.master: true node.data: false</li><li>从节点配置为：node.master: false node.data: true</li></ul></li></ul><h2 id="5-索引文档的流程">5.索引文档的流程</h2><p>​分片计算：shard = hash(document_id) % (num_of_primary_shards)</p><ol><li>用户请求集群的某个节点进行写入数据。（如果没有指定路由/协调节点，请求的节点扮演路由节点的角色）。</li><li>节点收到请求后，默认使用文档的id来确定所属的分片，则请求会转到对应分片上的节点。</li><li>当分片所在的节点接收到请求后，会将请求写入到 <code>Memory Buffer</code>,然后定时写入到<code>Filesystem Cache</code>,这个过程被称之为<code>refresh</code>。</li><li>在某些情况下，可能会造成内存和缓存中的数据丢失的问题，es通过<code>translog</code>的机制来保证数据的可靠性。在接收到请求后，会同时写入<code>translog</code>，当缓存中的数据<code>写入磁盘</code>后，才会清楚掉，这个过程被叫做<code>fresh</code>。</li><li>如果成功，则将请求并行转发到副本分片所在的节点上，等待结果返回。所有的副本分片<code>都报告成功</code>，<code>请求节点</code>将向<code>协调节点</code>报告成功，<code>协调节点</code>向请求<code>客户端</code>报告写入成功。</li></ol><h2 id="6-更新和删除文档的流程">6. 更新和删除文档的流程</h2><ul><li>删除和更新都是写操作，但是es中的文档是不可变的，所以不可以被删除或者改动以展示其变更。</li><li>在es中每个段都有一个对应的<code>.del</code>文件，在执行删除请求中，会在.del文件中将该文档<code>标记为删除</code>。但是该文档依赖可以模糊匹配。当段进行合并时候，<code>.del</code>文件中被标记为删除的文档不会被合并写入新的段。</li><li>执行更新操作时候，旧的文档在<code>.del</code>文件中被<code>标记为删除</code>，新版本的文档被索引到一个新的段，就版本的文档一栏可以进行模糊匹配，但会在结果中进行<code>过滤</code>掉。</li></ul><h2 id="7-搜索的流程">7.搜索的流程</h2><p>​搜索被执行成一个两阶段过程，我们称之为 Query Then Fetch；</p><h3 id="query阶段">query阶段</h3><ul><li>在查询阶段，查询会广播到所有的每一个分片拷贝，每个分片在本地执行搜索并构建出一个优先队列，</li><li>在每个分片返回的各自优先队列中所有的文档id和排序值给协调节点，它合并这些值到自己的优先队列来产生一个全局排序后的结果列表。</li></ul><h3 id="Fetch阶段">Fetch阶段</h3><ul><li>协调节点辨别出哪些文档需要被取回并向相关的分片提交多个 GET 请求。每 个分片加载并丰富文档，如果有需要的话，接着返回文档给协调节点。一旦所有的文档都被取回了， 协调节点返回结果给客户端</li></ul><h2 id="8-在并发情况下，保持读写一致性。">8.在并发情况下，保持读写一致性。</h2><ul><li>通过版本号使用乐观锁并发控制，以确保新版本不会被旧版本覆盖。</li><li>对于写操作，一致性级别支持 quorum/one/all，默认为 quorum，只有大多数分片可用时才允许写操作。即便是大多数可用，也可能存在网络等因素，导致写入失败，这样该副本会被认为故障分片将会在一个不同的节点上重建。</li><li>对于读操作，可以设置 replication 为 sync(默认)，这使得操作在主分片和副本分片都完成后才会返回； 如果设置 replication 为 async 时，也可以通过设置搜索请求参数_preference 为 primary 来查询主分片， 确保文档是最新版本</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ常见面试题</title>
      <link href="/posts/a790.html"/>
      <url>/posts/a790.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是rabbitmq">1.什么是rabbitmq</h3><ul><li><code>rabbitmq</code>是采用<code>AMQP</code>高级消息队列协议的一种消息队列技术，最大的特地是消费不需要确保消息提供方存在，实现了一种服务之间的<code>解耦</code>。</li><li><code>rabbitmq</code>在分布式系统下具备<strong>异步、削峰、负债均衡</strong>等一系列的高级功能。</li><li><code>rabbitmq</code>拥有<code>持久化</code>机制，进程消息，队列中的消息都可以进行持久化保存。</li><li>在高并发的情况下，消息队列可以使得同步访问变为串行访问达到一定量的<code>限流</code>，方便数据库的操作。</li></ul><h3 id="2-消息确认发送和确认接收机制">2.消息确认发送和确认接收机制</h3><p><strong>发送方确认模式：</strong></p><ol><li>将信道设置为<code>confirm</code>模式（发送方确认模式），则所有在此信道上发布的消息都会被指派一个唯一的<code>ID</code>。</li><li>一旦消息被投递到指定的队列，或者被写入<code>磁盘</code>后（<code>可持久化的消息</code>），信道都会发送一个<code>确认</code>给生产者。</li><li>如果<code>rabbitmq</code>发生内部错误导致消息发送失败，则会发送一条<code>未确认</code>的消息给生产者。</li><li>发送方确认模式是<code>异步</code>模式，生产者在等待确认的同时还可以持续发送消息，当确认消息到达生产者应用程序，生产者会回调方法就会被触发来 处理确认消息。</li></ol><p><strong>接收方确认模式</strong></p><ol><li>消费者每次接收一条消息都进行确认。只有消费者确认了消息，rabbitmq才可以安全的把消息从队列中删除（rabbitmq仅通过消费者的连接中断来确认是否需要重新发送消息。只要连接不中断，mq给足了时间让消费者来处理消息。保证数据的一致性）</li></ol><p><strong>特殊情况</strong></p><ol><li>如果消费者接收到消息，并且在确认之前断开了连接或者取消了订阅，rabbitmq会认为消息没有被消费，然后重新分发给下一个消费者。</li><li>如果消费者接收到消息却没有确认消息，连接也没有断开，rabbitmq会认为该消费者繁忙，不会给该消费者下发更多的消息。</li></ol><h3 id="3-重复消费问题">3.重复消费问题</h3><h4 id="3-1问题概述"><strong>3.1问题概述</strong></h4><ul><li>正常情况下，消费者在消费完消息后会发送一个确认消费的的消息给队列，消息队列就知道该消息被消费，将会将该消息从消息队列中删除。</li><li>但是由于网络等故障，确认消息没有传送到消息队列，导致消息队列不知道该消息已经被消费，继续分发给下一个消费者，造成消息的重复消费。</li></ul><h4 id="3-2解决思路">3.2解决思路</h4><ul><li>MQ 内部针对每条生产者发送的消息生成一个<code> inner-msg-id</code>，作 为<code>去重</code>的依据（消息投递失败并重传）</li><li>保证消息的<code>唯一性</code>，在消息消费时候，根据这个<code>id</code>作为<code>去重</code>的依据，根据此<code>id判断</code>该消息是否被消费过</li></ul><h3 id="4-消息传输、分发、路由">4.消息传输、分发、路由</h3><h4 id="4-1传输">4.1传输</h4><ul><li>由于tcp连接的<code>创建和销毁开销大</code>，且并发数受到系统资源的限制，会造成性能的低下，所以<code>rabbitmq</code>采用使用<code>信道</code>的方式来进行<code>传输</code>数据。</li><li>信道是建立在真是的tcp连接内的<code>虚拟连接</code>，并且每条<code>TCP连接上</code>的信道是没有限制的。</li></ul><h4 id="4-2-分发">4.2 分发</h4><ul><li>若该队列至少有一个消费者进行订阅，消息将以循环（round-robin) 的方式发送给消费者。每条消息只会分发给一个订阅者并确认消息。</li><li>通过路由可以实现消息的多消费功能</li></ul><h4 id="4-3-路由">4.3 路由</h4><ul><li>消息提供方-》路由-》一个或者多个队列</li><li>消息发布到交换机，消息将拥有一个路由键<code>(routing-key)</code>,在消息创建时候指定。、</li><li>通过<code>(routing-key)</code>,就可以把队列绑定到指定的交换机。</li><li>消息到达交换机，rabbitmq会将消息的路由键和队列的路由键进行匹配（针对不同的交换机有不同的匹配规则）。</li></ul><h4 id="4-4-常用的交换机">4.4 常用的交换机</h4><ul><li>fanout: 如果交换机收到消息，将会广播到所有绑定的队列上面。</li><li>direct：如果路由键完全匹配，消息被投递到相应的队列。</li><li>topic：可以使来自不同源头的消息到达同一个队列。使用这个交换机可以使用通配符。</li></ul><h3 id="5-消息丢失问题">5.消息丢失问题</h3><h4 id="5-1生产者丢失">5.1生产者丢失</h4><ul><li>生产者丢失消息：rabbitmq提供了transaction和confirm模式来确保生产者不会丢失消息。</li><li>transaction：发送消息前开启事务(<code>（channel.txSelect()</code>)，然后发送消息，如果发送过程中产生了什么异常，则事务进行回滚（<code>channel.txRollback()</code>）发送成功则提交事务（<code>channel.txCommit()</code>），可能会造成吞吐量下降问题。</li><li>confirm：一旦<code>channe</code>l进入<code>confirm</code>模式，所有在该信道上发布的消息都将会被指派 一个唯一的ID（从1开始），一旦消息被投递到所有匹配的队列之后； <code>rabbitMQ</code>就会发送一个<code>ACK</code>给生产者（包含消息的唯一ID），这就使得生产者知道消息已经正确 到达目的队列了； 如果rabbitMQ没能处理该消息，则会发送一个Nack消息给你，你可以进行重试操作。</li></ul><h4 id="5-2消息队列丢失">5.2消息队列丢失</h4><ul><li>处理消息队列丢失消息一般是开启消息的<code>持久化</code>。</li><li>这个<code>持久化</code>机会可以配合<code>confirm</code>机制进行使用，可以在消息持久化后，在给生产者发送一个<code>ack</code>信号,这样如果消息持久化之前，rabbitmq出现故障，那么生产者接收不到<code>ack信号</code>，生产者会<code>重新发送消息</code>。</li></ul><h4 id="5-3-消费者丢失">5.3 消费者丢失</h4><ul><li>消费者丢失消息一般是采用了自动应答的方式，我们改为手动应答。</li><li>消费者收到消息之后，消费消息之前，自动回复rabbitmq已经收到消息。如果这时处理消息失败，就会丢失该消息；</li><li>处理消息之后，手动回复确认消息</li></ul><h3 id="6-rabbitmq集群">6.rabbitmq集群</h3><h4 id="6-1普通集群模式">6.1普通集群模式</h4><ul><li>在多台机器上面<code>启动多个rabbitmq实例</code>，每台<code>机器</code>启动一个。</li><li>我们所创建的<code>queue</code>只会放在其中一个<code>rabbitmq</code>实例上面，每个实例都可以<code>同步queue的元数据</code>（元数据可以认为是 queue 的一些配置信息，通过元数据，可以找到 queue 所在实例）。</li><li>在消费的时候，实际上如果连接到了另外一个实例，那个这个实例就会从<code>queue</code>所有的实例拉取数据。</li><li>这种方案主要是提高吞吐量，就是让集群中的多个节点来服务某个<code>queue</code>的<code>读写</code>操作。</li></ul><h4 id="6-2-镜像集群模式">6.2 镜像集群模式</h4><ul><li>这种模式是<code>rabbitmq</code>的<code>高可用模式</code>，在镜像模式下你创建的<code>queue</code>，无论是元数据还是<code>queue</code>里面的消息都会存在于多个实例上。</li><li>每一个<code>rabbitmq</code>都有这个<code>queue</code>的完整镜像，每次进行写消息进<code>queue</code>的时候，都会自动把消息同步到多个实例的<code>queue</code>上。</li><li>我们可以在<code>rabbitmq</code>的可视化页面，指定镜像模式的<code>策略</code>，在可以指定要求数据是同步到<code>所有节点</code>，还是同步指定数量的节点。</li><li>在这种模式下，任何一个机器宕机之后，其他节点上面的还包含queue的<code>完整数据</code>，不会造成数据丢失问题。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> rabbit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis常见面试题</title>
      <link href="/posts/959d.html"/>
      <url>/posts/959d.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、什么是redis">1、什么是redis</h3><p>redis是一个完全开源免费的，一个高性能的<strong>key-value</strong>数据库.</p><p>redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启时候可以再次加载使用。</p><p>redis的速度快，因为redis的数据都是存在内存中，查找和操作的时间的复杂度都是<code>O（1）</code>。</p><p>支持丰富的数据类型，支持 string，list，set，Zset，hash 等。</p><p>支持事务，操作都是有原子性的，对数据的更改要么全部执行，要么全部不执行。</p><p>当redis用于缓存的时候，可以合理的设置<code>key</code>的过期时间，过期后会自动删除，避免数据的冗余。</p><h3 id="2、redis的数据类型">2、redis的数据类型</h3><p>redis支持五种数据类型：String(字符串)，hash(哈希)，list(列表)，set(集合)，zset(有序集合)。</p><p>在项目中比较常用的是 <code>String</code>, <code>hash</code>。</p><h3 id="3、redis的持久化机制。">3、redis的持久化机制。</h3><p>redis支持两种持久化机制<code>RDB</code>和<code>AOF</code>:</p><h4 id="RDB">RDB</h4><p>用数据快照的方式半持久化，记录redis数据库某一时刻的全部的<code>key</code>和<code>value</code>写入一个临时的文件，持久化 结束后，用这个临时文件替换上次持久化的文件，达到数据恢复。</p><h5 id="优点">优点</h5><ul><li>只有一个<code>dump.rdb</code>文件，方便持久化</li><li>容灾性好，一个文件可以保存到安全的磁盘。</li><li>性能最大化，<code>fork</code>子进程完成写的操作，让主线程继续处理命令，使得IO最大化，保证了redis的高性能。</li><li>相对数据大时候，比AOF的启动要快速。</li></ul><h5 id="缺点">缺点</h5><p>数据安全性低，RDB是隔一段时间进行的持久化，万一这段时间内redis发生故障，就会造成数据丢失的问题。</p><h4 id="AOF">AOF</h4><p>redis将所有的命令行记录以redis命令，写入一个aof文件。</p><h5 id="优点-2">优点</h5><ul><li>数据安全，aof 持久化可以配置 <code>appendfsync</code> 属性，有 <code>always</code>，每进行一次 命令操作就记录到 aof 文件中一次。</li><li>通过append模式写文件，即使中途服务器发送故障宕机，可以通过<code>redis-check-aof</code>工具解决数据一致性的问题。</li><li>aof机制的<code>rewrite</code>模式，aof文件没有被<code>rewrite</code>之间，可以删除其中，某些没用的命令（flush all）</li></ul><h5 id="缺点-2">缺点</h5><ul><li><p>aof文件比rdb文件大，并且恢复速度慢</p></li><li><p>当数据集较大时，比rdb启动效率要低</p></li></ul><h3 id="4、redis常见的性能优化问题">4、redis常见的性能优化问题</h3><ul><li>Master节点最好不要写内存的快照，如果使用master写内存快照，<code>save</code>命令调度<code>rdbServer</code>函数，会阻塞主线程的工作，当快照较大时候，会使得主线程间断性的暂停服务。</li><li>为了主从复制的速度以及连接的稳定性，主从节点最好存在于同一个局域网，避免网络的问题导致性能不佳。</li><li>主从结构不要使用网状结构，使用单向链表更为稳定，<code>Master &lt;- Slave1 &lt;- Slave2 &lt;- Slave3…</code>这样的结构方便解决单点故障问题，实现<code>slave</code>对<code>master</code>的替换。如果master挂了，可以立刻启动slave作为master。</li></ul><h3 id="5、redis过期键的删除策略">5、redis过期键的删除策略</h3><ol><li>定时删除：在设置键的过期时间的同时，创建一个定时器<code>timer</code>,让定时器在键过期时间来临的时候，立刻对键进行删除操作。</li><li>惰性删除：放任键的过期时间不管，每次获取键的时候，都检查键的过期时间，如果过期的话，就删除改建，没有过期就返回该建。</li><li>定期删除：每隔一段时间程序就对数据库进行一次检查操作，删除里面过期的键。</li></ol><h3 id="6、redis同步机制">6、redis同步机制</h3><p>redis可以使用<code>主从同步</code>、<code>从从同步</code>。做第一次同步时候，主节点做一次<code>bgsave</code>,并同时将后续的修改操作记录到<code>内存 buffer</code>中，完成后将rdb文件全部同步复制</p><p>到从节点，复制节点接收完成后将rdb镜像加载到内存中。加载完成后通知主节点将期间的修改的操作记录同步复制到从节点进行重放就完成了同步过程。</p><h3 id="7、redis集群">7、redis集群</h3><p><code>Redis Sentinal（哨兵模式）</code> 着眼于高可用，在 master 宕机时会自动将 slave 提升为 master，继续提供服务。</p><p><code>Redis Cluster（普通模式）</code> 着眼于扩展性，在单个 redis 内存不足时，使用 Cluster 进行 分片存储。</p><h3 id="8、redis哈希槽">8、redis哈希槽</h3><p>redis集群没用一致性的使用hash，而是加入的哈希槽的概念，redis集群有<code>16384</code>个哈希槽，每一个<code>key</code>通过<code>CRC16</code>校验后对16384取模赖决定这个key放在哪个槽，集群的每一个节点负责一部分hash槽。</p><h3 id="9、redis事务">9、redis事务</h3><p>redis事务是一个单独隔离的操作:事务中的所有命令都会被序列化、按顺序的执行。事务在执行的过程中，不会被其他客户端发送来的命令打断。</p><p>事务是一个原子操作：要么都成功，要么都失败。</p><h3 id="10、redis内存优化">10、redis内存优化</h3><p>redis尽可能的使用散列表(<code>hash</code>),散列表使用的内存非常小，尽可能的将数据模型抽象到一个散列表里面。</p><h3 id="11、redis缓存穿透问题">11、redis缓存穿透问题</h3><p><strong>问题描述</strong>：redis中对应的key的数据在数据源中不存在，每次针对此key的请求都从缓存中获取不到，请求都会到数据库，从而可能压垮数据库，比如用一个不存在的用户的id获取用户的信息，不论从数据库还是缓存都没有，若有人利用次漏洞进行攻击可能压垮数据库。</p><p><strong>解决方案</strong>：</p><ul><li><code>对空值进行缓存</code>：如果一个查询返回为空的数据(不管数据是否不存在)，我继续把这个空结果进行缓存，设置空结果的过期时间会很短，最长时候不超过五分钟。</li><li><code>设置可访问的白名单</code>：使用<code>bitmaps</code>类型定义一个可以访问的名单，名单<code>id</code>作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不<code>bitmaps</code>里面，进行拦截，不允许访问。</li><li><code>采用布隆过滤器(·Bloom Filter)</code>：布隆过滤器可以用于检索一个元素是否存在一个集合中，它的优点是空间效率和查询时间都原因超出一般的算法，缺点是有一定的误识别率和删除困难那，将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被 这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。</li><li><code>进行实时监控</code>：当发现redis的命中率快速降低，需要排查访问对象和访问的数据，和运维人员配合，设置黑名单限制服务。</li></ul><h3 id="12、redis缓存击穿问题">12、redis缓存击穿问题</h3><p><strong>问题描述</strong>：key对应的数据存在，但在redis中过期，这些请求发现缓存过期一般都会从后端的数据库加载数据并返回设置到缓存中，这时候大量并发请求肯会把数据库瞬间压垮。</p><p><strong>解决方案</strong>：</p><ul><li><p><code>预先设置热门数据</code>：在redis访问高峰之前，把一些热门的数据提前缓存到<code>redis</code>中，加大这些热门数据<code>key</code>的时常。</p></li><li><p><code>实时调整</code>：现场实时监控哪些数据是热门数据，实时调整<code>key</code>的过期时间。</p></li><li><p><code>使用锁</code>：</p><ol><li><p>在缓存失效的时候，不去立即<code>load db</code>。</p></li><li><p>先使用缓存工具的某些带返回值的操作（比如redis的setnx）去set一个<code>mutex key</code>。</p></li><li><p>当操作返回成功时候，在进行<code>load db</code>操作，并返回缓存，最后删除<code>mutex key</code>。</p></li><li><p>当操作返回失败的时候，证明有线程在<code>load db</code>,当前线程睡眠一段时候在重试整个get缓存的方法.</p></li></ol></li></ul><h3 id="13、redis缓存雪崩问题">13、redis缓存雪崩问题</h3><p><strong>问题描述</strong>：key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p>缓存雪崩与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key正常访问。</p><p><strong>解决方案</strong>：</p><ul><li><code>使用多级缓存架构</code>：nginx缓存 + redis缓存 +其他缓存（ehcache等）。</li><li><code>使用锁或者队列</code>：用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况。</li><li><code>设置过期标志更新缓存</code>：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存。</li><li><code>将缓存失效时间分散开</code>：比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</li></ul><h3 id="14、redis淘汰策略">14、redis淘汰策略</h3><p><code>volatile-lru</code>：从已设置过期时间的数据集（<code>server.db[i].expires</code>）中挑选最近最少时间的数据进行淘汰。</p><p><code>volatile-ttl</code>：从已设置过期时间的数据集，挑选将要过期的数据淘汰。</p><p><code>volatile-random</code>：从已设置过期时间的数据集，随机挑选数据进行淘汰。</p><p><code>allkeys-lru</code>：从数据集（<code>server.db[i].dict</code>）挑选最少使用的进行淘汰。</p><p><code>allkeys-random</code>：从数据集（server.db[i].dict）中任意选择数据淘汰。</p><p><code>no-enviction（驱逐）</code>：禁止驱逐数据。</p><h4 id="使用规则">使用规则</h4><ul><li>如果数据呈现幂规律分步，也就是一部分访问频率高，一部分低，则使用<code>allkeys-lru</code></li><li>如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用 <code>allkeys-random</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法汇总</title>
      <link href="/posts/2013454d.html"/>
      <url>/posts/2013454d.html</url>
      
        <content type="html"><![CDATA[<h1>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'Amap'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
